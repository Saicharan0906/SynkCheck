/**
 * AccountCombinationServiceStub.java
 *
 * <p>This file was auto-generated from WSDL by the Apache Axis2 version: 1.8.0 Built on : Aug 01,
 * 2021 (07:27:19 HST)
 */
package com.rite.products.convertrite.stubs.accountcombinationservice;

/*
 *  AccountCombinationServiceStub java implementation
 */

import org.apache.commons.lang3.StringUtils;

public class AccountCombinationServiceStub extends org.apache.axis2.client.Stub {
    protected org.apache.axis2.description.AxisOperation[] _operations;

    // hashmaps to keep the fault mapping
    private java.util.Map<org.apache.axis2.client.FaultMapKey, java.lang.String> faultExceptionNameMap =
            new java.util.HashMap<org.apache.axis2.client.FaultMapKey, java.lang.String>();
    private java.util.Map<org.apache.axis2.client.FaultMapKey, java.lang.String> faultExceptionClassNameMap =
            new java.util.HashMap<org.apache.axis2.client.FaultMapKey, java.lang.String>();
    private java.util.Map<org.apache.axis2.client.FaultMapKey, java.lang.String> faultMessageMap =
            new java.util.HashMap<org.apache.axis2.client.FaultMapKey, java.lang.String>();

    private static int counter = 0;

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }
        counter = counter + 1;
        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {

        // creating the Service with a unique name
        _service =
                new org.apache.axis2.description.AxisService(
                        "AccountCombinationService" + getUniqueSuffix());
        addAnonymousOperations();

        // creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[2];

        __operation = new org.apache.axis2.description.OutOnlyAxisOperation();

        __operation.setName(
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                        "validateAndCreateAccountsAsync"));
        _service.addOperation(__operation);

        (__operation)
                .getMessage(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_OUT_VALUE)
                .getPolicySubject()
                .attachPolicy(
                        getPolicy(StringUtils.join(
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><wsp:ExactlyOne><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout>",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite>",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy>",
                                "</sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All></wsp:ExactlyOne></wsp:Policy>")));

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                        "validateAndCreateAccounts"));
        _service.addOperation(__operation);

        (__operation)
                .getMessage(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_OUT_VALUE)
                .getPolicySubject()
                .attachPolicy(
                        getPolicy(StringUtils.join(
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><wsp:ExactlyOne><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">",
                                "<sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">",
                                "<sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout>",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken>",
                                "<sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n            <sp:Header Name=\"SignatureConfirmation\" Namespace=\"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Namespace=\"http://www.w3.org/2005/08/addressing\"/>\n            <sp:Header Namespace=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n            <sp:Header Name=\"fmw-context\" Namespace=\"http://xmlns.oracle.com/fmw/context/1.0\"/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All></wsp:ExactlyOne></wsp:Policy>")));

        (__operation)
                .getMessage(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE)
                .getPolicySubject()
                .attachPolicy(
                        getPolicy(StringUtils.join(
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><wsp:ExactlyOne><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken>",
                                "</wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken>",
                                "</wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy>",
                                "</sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\">",
                                "<sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken>",
                                "<wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\">",
                                "</wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy>",
                                "</sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:ProtectTokens/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SignedSupportingTokens><sp:EndorsingSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:EndorsingSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:SymmetricBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:ProtectionToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:X509Token><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:RequireThumbprintReference/><sp:WssX509V3Token11/></wsp:Policy></sp:X509Token></wsp:Policy></sp:ProtectionToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128Exn256/></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/><sp:OnlySignEntireHeadersAndBody/></wsp:Policy></sp:SymmetricBinding><sp:SignedSupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SignedSupportingTokens><sp:Wss11 xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:MustSupportRefKeyIdentifier/><sp:MustSupportRefIssuerSerial/><sp:MustSupportRefThumbprint/><sp:MustSupportRefEncryptedKey/><sp:RequireSignatureConfirmation/></wsp:Policy></sp:Wss11><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV11Token10/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:SamlToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssSamlV20Token11/></wsp:Policy></sp:SamlToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout><sp:IncludeTimestamp/></wsp:Policy></sp:TransportBinding><sp:SupportingTokens xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:UsernameToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:WssUsernameToken10/></wsp:Policy></sp:UsernameToken></wsp:Policy></sp:SupportingTokens><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"/></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All><wsp:All><sp:SignedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:SignedParts><sp:EncryptedParts xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\">\n            <sp:Body/>\n         </sp:EncryptedParts><wsOptfiser:OptimizedFastInfosetSerialization enabled=\"true\" xmlns:wsOptfiser=\"http://java.sun.com/xml/ns/wsit/2006/09/policy/fastinfoset/service\"></wsOptfiser:OptimizedFastInfosetSerialization><sp:TransportBinding xmlns:sp=\"http://schemas.xmlsoap.org/ws/2005/07/securitypolicy\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Basic128/></wsp:Policy></sp:AlgorithmSuite><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><osp:HttpJwtAuthentication xmlns:osp=\"http://schemas.oracle.com/ws/2012/01/wssecuritypolicy\"></osp:HttpJwtAuthentication></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Lax/></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding><wsaw:UsingAddressing xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\"></wsaw:UsingAddressing></wsp:All></wsp:ExactlyOne></wsp:Policy>")));

        _operations[1] = __operation;
    }

    // populates the faults
    private void populateFaults() {

        faultExceptionNameMap.put(
                new org.apache.axis2.client.FaultMapKey(
                        new javax.xml.namespace.QName(
                                "http://xmlns.oracle.com/adf/svc/errors/", "ServiceErrorMessage"),
                        "validateAndCreateAccounts"),
                "com.rite.products.convertrite.stubs.accountcombinationservice.ServiceException");
        faultExceptionClassNameMap.put(
                new org.apache.axis2.client.FaultMapKey(
                        new javax.xml.namespace.QName(
                                "http://xmlns.oracle.com/adf/svc/errors/", "ServiceErrorMessage"),
                        "validateAndCreateAccounts"),
                "com.rite.products.convertrite.stubs.accountcombinationservice.ServiceException");
        faultMessageMap.put(
                new org.apache.axis2.client.FaultMapKey(
                        new javax.xml.namespace.QName(
                                "http://xmlns.oracle.com/adf/svc/errors/", "ServiceErrorMessage"),
                        "validateAndCreateAccounts"),
                "com.rite.products.convertrite.stubs.accountcombinationservice.AccountCombinationServiceStub$ServiceErrorMessageE");
    }

    /** Constructor that takes in a configContext */
    public AccountCombinationServiceStub(
            org.apache.axis2.context.ConfigurationContext configurationContext,
            java.lang.String targetEndpoint)
            throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /** Constructor that takes in a configContext and useseperate listner */
    public AccountCombinationServiceStub(
            org.apache.axis2.context.ConfigurationContext configurationContext,
            java.lang.String targetEndpoint,
            boolean useSeparateListener)
            throws org.apache.axis2.AxisFault {
        // To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, _service);

        _service.applyPolicy();

        _serviceClient
                .getOptions()
                .setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /** Default Constructor */
    public AccountCombinationServiceStub(
            org.apache.axis2.context.ConfigurationContext configurationContext)
            throws org.apache.axis2.AxisFault {

        this(
                configurationContext,
                "https://fa-etao-dev20-saasfademo1.ds-fa.oraclepdemos.com:443/fscmService/AccountCombinationService");
    }

    /** Default Constructor */
    public AccountCombinationServiceStub() throws org.apache.axis2.AxisFault {

        this(
                "https://fa-etao-dev20-saasfademo1.ds-fa.oraclepdemos.com:443/fscmService/AccountCombinationService");
    }

    /** Constructor taking the target endpoint */
    public AccountCombinationServiceStub(java.lang.String targetEndpoint)
            throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    /** Auto generated method signature */
    public void validateAndCreateAccountsAsync(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub
                    .ValidateAndCreateAccountsAsync
                    validateAndCreateAccountsAsync)
            throws java.rmi.RemoteException {

        org.apache.axis2.context.MessageContext _messageContext =
                new org.apache.axis2.context.MessageContext();

        org.apache.axis2.client.OperationClient _operationClient =
                _serviceClient.createClient(_operations[0].getName());
        _operationClient
                .getOptions()
                .setAction(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/validateAndCreateAccountsAsync");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(
                _operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

        org.apache.axiom.soap.SOAPEnvelope env = null;

        // Style is Doc.

        env =
                toEnvelope(
                        getFactory(_operationClient.getOptions().getSoapVersionURI()),
                        validateAndCreateAccountsAsync,
                        optimizeContent(
                                new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                        "validateAndCreateAccountsAsync")),
                        new javax.xml.namespace.QName(
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                "validateAndCreateAccountsAsync"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope

        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.execute(true);

        if (_messageContext.getTransportOut() != null) {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }

        return;
    }

    /**
     * Auto generated method signature
     *
     * @see
     *     com.rite.products.convertrite.stubs.accountcombinationservice.AccountCombinationService#validateAndCreateAccounts
     * @param validateAndCreateAccounts
     * @throws
     *     com.rite.products.convertrite.stubs.accountcombinationservice.ServiceException
     *     :
     */
    public com.rite.products.convertrite.stubs
            .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccountsResponse
    validateAndCreateAccounts(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts
                    validateAndCreateAccounts)
            throws java.rmi.RemoteException,
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.ServiceException {
        org.apache.axis2.context.MessageContext _messageContext =
                new org.apache.axis2.context.MessageContext();
        try {
            org.apache.axis2.client.OperationClient _operationClient =
                    _serviceClient.createClient(_operations[1].getName());
            _operationClient
                    .getOptions()
                    .setAction(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/validateAndCreateAccounts");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(
                    _operationClient,
                    org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                    "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env =
                    toEnvelope(
                            getFactory(_operationClient.getOptions().getSoapVersionURI()),
                            validateAndCreateAccounts,
                            optimizeContent(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                            "validateAndCreateAccounts")),
                            new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                    "validateAndCreateAccounts"));

            // adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            // execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext =
                    _operationClient.getMessageContext(
                            org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            _returnEnv.buildWithAttachments();

            java.lang.Object object =
                    fromOM(
                            _returnEnv.getBody().getFirstElement(),
                            com.rite.products.convertrite.stubs
                                    .accountcombinationservice.AccountCombinationServiceStub
                                    .ValidateAndCreateAccountsResponse.class);
            org.apache.axis2.transport.TransportUtils.detachInputStream(_returnMessageContext);
            System.out.println("object->"+object.toString());
            return (com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub
                    .ValidateAndCreateAccountsResponse)
                    object;

        } catch (org.apache.axis2.AxisFault f) {

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                        new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "validateAndCreateAccounts"))) {
                    // make the fault by reflection
                    try {
                        java.lang.String exceptionClassName =
                                faultExceptionClassNameMap.get(
                                        new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "validateAndCreateAccounts"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor =
                                exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        // message class
                        java.lang.String messageClassName =
                                faultMessageMap.get(
                                        new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "validateAndCreateAccounts"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass);
                        java.lang.reflect.Method m =
                                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});

                        if (ex
                                instanceof
                                com.rite.products.convertrite.stubs
                                        .accountcombinationservice.ServiceException) {
                            throw (com.rite.products.convertrite.stubs
                                    .accountcombinationservice.ServiceException)
                                    ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////

    private static org.apache.neethi.Policy getPolicy(java.lang.String policyString) {
        return org.apache.neethi.PolicyEngine.getPolicy(
                org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(
                                new java.io.StringReader(policyString))
                        .getDocument()
                        .getXMLStreamReader(false));
    }

    /////////////////////////////////////////////////////////////////////////

    private javax.xml.namespace.QName[] opNameArray = null;

    private boolean optimizeContent(javax.xml.namespace.QName opName) {

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }
        return false;
    }
    // https://fa-etao-dev20-saasfademo1.ds-fa.oraclepdemos.com:443/fscmService/AccountCombinationService
    public static class XSDType implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = XSDType
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":XSDType",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "XSDType", xmlWriter);
                }
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static XSDType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                XSDType object = new XSDType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"XSDType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (XSDType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list1.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone1 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone1 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class AccountValidationOutputE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                        "accountValidationOutput",
                        "ns5");

        /** field for AccountValidationOutput */
        protected AccountValidationOutput localAccountValidationOutput;

        /**
         * Auto generated getter method
         *
         * @return AccountValidationOutput
         */
        public AccountValidationOutput getAccountValidationOutput() {
            return localAccountValidationOutput;
        }

        /**
         * Auto generated setter method
         *
         * @param param AccountValidationOutput
         */
        public void setAccountValidationOutput(AccountValidationOutput param) {

            this.localAccountValidationOutput = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localAccountValidationOutput == null) {
                throw new org.apache.axis2.databinding.ADBException(
                        "accountValidationOutput cannot be null!");
            }
            localAccountValidationOutput.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/")) {
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static AccountValidationOutputE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                AccountValidationOutputE object = new AccountValidationOutputE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "accountValidationOutput")
                                    .equals(reader.getName())) {

                                object.setAccountValidationOutput(AccountValidationOutput.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class AccountValidationInputE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                        "accountValidationInput",
                        "ns5");

        /** field for AccountValidationInput */
        protected AccountValidationInput localAccountValidationInput;

        /**
         * Auto generated getter method
         *
         * @return AccountValidationInput
         */
        public AccountValidationInput getAccountValidationInput() {
            return localAccountValidationInput;
        }

        /**
         * Auto generated setter method
         *
         * @param param AccountValidationInput
         */
        public void setAccountValidationInput(AccountValidationInput param) {

            this.localAccountValidationInput = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localAccountValidationInput == null) {
                throw new org.apache.axis2.databinding.ADBException(
                        "accountValidationInput cannot be null!");
            }
            localAccountValidationInput.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/")) {
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static AccountValidationInputE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                AccountValidationInputE object = new AccountValidationInputE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "accountValidationInput")
                                    .equals(reader.getName())) {

                                object.setAccountValidationInput(AccountValidationInput.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class FindCriteria implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = FindCriteria
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for FetchStart */
        protected int localFetchStart =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");

        /**
         * Auto generated getter method
         *
         * @return int
         */
        public int getFetchStart() {
            return localFetchStart;
        }

        /**
         * Auto generated setter method
         *
         * @param param FetchStart
         */
        public void setFetchStart(int param) {

            this.localFetchStart = param;
        }

        /** field for FetchSize */
        protected int localFetchSize =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("-1");

        /**
         * Auto generated getter method
         *
         * @return int
         */
        public int getFetchSize() {
            return localFetchSize;
        }

        /**
         * Auto generated setter method
         *
         * @param param FetchSize
         */
        public void setFetchSize(int param) {

            this.localFetchSize = param;
        }

        /** field for Filter */
        protected ViewCriteria localFilter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFilterTracker = false;

        public boolean isFilterSpecified() {
            return localFilterTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ViewCriteria
         */
        public ViewCriteria getFilter() {
            return localFilter;
        }

        /**
         * Auto generated setter method
         *
         * @param param Filter
         */
        public void setFilter(ViewCriteria param) {
            localFilterTracker = param != null;

            this.localFilter = param;
        }

        /** field for SortOrder */
        protected SortOrder localSortOrder;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSortOrderTracker = false;

        public boolean isSortOrderSpecified() {
            return localSortOrderTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return SortOrder
         */
        public SortOrder getSortOrder() {
            return localSortOrder;
        }

        /**
         * Auto generated setter method
         *
         * @param param SortOrder
         */
        public void setSortOrder(SortOrder param) {
            localSortOrderTracker = param != null;

            this.localSortOrder = param;
        }

        /** field for FindAttribute This was an Array! */
        protected java.lang.String[] localFindAttribute;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFindAttributeTracker = false;

        public boolean isFindAttributeSpecified() {
            return localFindAttributeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String[]
         */
        public java.lang.String[] getFindAttribute() {
            return localFindAttribute;
        }

        /** validate the array for FindAttribute */
        protected void validateFindAttribute(java.lang.String[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param FindAttribute
         */
        public void setFindAttribute(java.lang.String[] param) {

            validateFindAttribute(param);

            localFindAttributeTracker = param != null;

            this.localFindAttribute = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param java.lang.String
         */
        public void addFindAttribute(java.lang.String param) {
            if (localFindAttribute == null) {
                localFindAttribute = new java.lang.String[] {};
            }

            // update the setting tracker
            localFindAttributeTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localFindAttribute);
            list.add(param);
            this.localFindAttribute =
                    (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        /** field for ExcludeAttribute */
        protected boolean localExcludeAttribute =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getExcludeAttribute() {
            return localExcludeAttribute;
        }

        /**
         * Auto generated setter method
         *
         * @param param ExcludeAttribute
         */
        public void setExcludeAttribute(boolean param) {

            this.localExcludeAttribute = param;
        }

        /** field for ChildFindCriteria This was an Array! */
        protected ChildFindCriteria[] localChildFindCriteria;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localChildFindCriteriaTracker = false;

        public boolean isChildFindCriteriaSpecified() {
            return localChildFindCriteriaTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ChildFindCriteria[]
         */
        public ChildFindCriteria[] getChildFindCriteria() {
            return localChildFindCriteria;
        }

        /** validate the array for ChildFindCriteria */
        protected void validateChildFindCriteria(ChildFindCriteria[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param ChildFindCriteria
         */
        public void setChildFindCriteria(ChildFindCriteria[] param) {

            validateChildFindCriteria(param);

            localChildFindCriteriaTracker = param != null;

            this.localChildFindCriteria = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param ChildFindCriteria
         */
        public void addChildFindCriteria(ChildFindCriteria param) {
            if (localChildFindCriteria == null) {
                localChildFindCriteria = new ChildFindCriteria[] {};
            }

            // update the setting tracker
            localChildFindCriteriaTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localChildFindCriteria);
            list.add(param);
            this.localChildFindCriteria =
                    (ChildFindCriteria[]) list.toArray(new ChildFindCriteria[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":FindCriteria",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "FindCriteria",
                            xmlWriter);
                }
            }

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "fetchStart", xmlWriter);

            if (localFetchStart == java.lang.Integer.MIN_VALUE) {

                throw new org.apache.axis2.databinding.ADBException("fetchStart cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFetchStart));
            }

            xmlWriter.writeEndElement();

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "fetchSize", xmlWriter);

            if (localFetchSize == java.lang.Integer.MIN_VALUE) {

                throw new org.apache.axis2.databinding.ADBException("fetchSize cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFetchSize));
            }

            xmlWriter.writeEndElement();
            if (localFilterTracker) {
                if (localFilter == null) {
                    throw new org.apache.axis2.databinding.ADBException("filter cannot be null!!");
                }
                localFilter.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "filter"),
                        xmlWriter);
            }
            if (localSortOrderTracker) {
                if (localSortOrder == null) {
                    throw new org.apache.axis2.databinding.ADBException("sortOrder cannot be null!!");
                }
                localSortOrder.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "sortOrder"),
                        xmlWriter);
            }
            if (localFindAttributeTracker) {
                if (localFindAttribute != null) {
                    namespace = "http://xmlns.oracle.com/adf/svc/types/";
                    for (int i = 0; i < localFindAttribute.length; i++) {

                        if (localFindAttribute[i] != null) {

                            writeStartElement(null, namespace, "findAttribute", xmlWriter);

                            xmlWriter.writeCharacters(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                            localFindAttribute[i]));

                            xmlWriter.writeEndElement();

                        } else {

                            // we have to do nothing since minOccurs is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("findAttribute cannot be null!!");
                }
            }
            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "excludeAttribute", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException("excludeAttribute cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localExcludeAttribute));
            }

            xmlWriter.writeEndElement();
            if (localChildFindCriteriaTracker) {
                if (localChildFindCriteria != null) {
                    for (int i = 0; i < localChildFindCriteria.length; i++) {
                        if (localChildFindCriteria[i] != null) {
                            localChildFindCriteria[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/adf/svc/types/", "childFindCriteria"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("childFindCriteria cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static FindCriteria parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                FindCriteria object = new FindCriteria();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"FindCriteria".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (FindCriteria) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    java.util.ArrayList list7 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "fetchStart")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "fetchStart" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFetchStart(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "fetchSize")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "fetchSize" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFetchSize(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "filter")
                            .equals(reader.getName())) {

                        object.setFilter(ViewCriteria.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "sortOrder")
                            .equals(reader.getName())) {

                        object.setSortOrder(SortOrder.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "findAttribute")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list5.add(reader.getElementText());

                        // loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;
                        while (!loopDone5) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/types/", "findAttribute")
                                        .equals(reader.getName())) {
                                    list5.add(reader.getElementText());

                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setFindAttribute(
                                (java.lang.String[]) list5.toArray(new java.lang.String[list5.size()]));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "excludeAttribute")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "excludeAttribute" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExcludeAttribute(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "childFindCriteria")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list7.add(ChildFindCriteria.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone7 = false;
                        while (!loopDone7) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone7 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/types/", "childFindCriteria")
                                        .equals(reader.getName())) {
                                    list7.add(ChildFindCriteria.Factory.parse(reader));

                                } else {
                                    loopDone7 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setChildFindCriteria(
                                (ChildFindCriteria[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ChildFindCriteria.class, list7));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Fault implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0", "Fault", "ns1");

        /** field for Fault */
        protected FaultType localFault;

        /**
         * Auto generated getter method
         *
         * @return FaultType
         */
        public FaultType getFault() {
            return localFault;
        }

        /**
         * Auto generated setter method
         *
         * @param param Fault
         */
        public void setFault(FaultType param) {

            this.localFault = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localFault == null) {
                throw new org.apache.axis2.databinding.ADBException("Fault cannot be null!");
            }
            localFault.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Fault parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Fault object = new Fault();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0", "Fault")
                                    .equals(reader.getName())) {

                                object.setFault(FaultType.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class FaultType implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = FaultType
    Namespace URI = http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0
    Namespace Prefix = ns1
    */

        /** field for Faultcode */
        protected javax.xml.namespace.QName localFaultcode;

        /**
         * Auto generated getter method
         *
         * @return javax.xml.namespace.QName
         */
        public javax.xml.namespace.QName getFaultcode() {
            return localFaultcode;
        }

        /**
         * Auto generated setter method
         *
         * @param param Faultcode
         */
        public void setFaultcode(javax.xml.namespace.QName param) {

            this.localFaultcode = param;
        }

        /** field for Faultstring */
        protected java.lang.String localFaultstring;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getFaultstring() {
            return localFaultstring;
        }

        /**
         * Auto generated setter method
         *
         * @param param Faultstring
         */
        public void setFaultstring(java.lang.String param) {

            this.localFaultstring = param;
        }

        /** field for Faultactor */
        protected org.apache.axis2.databinding.types.URI localFaultactor;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFaultactorTracker = false;

        public boolean isFaultactorSpecified() {
            return localFaultactorTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axis2.databinding.types.URI
         */
        public org.apache.axis2.databinding.types.URI getFaultactor() {
            return localFaultactor;
        }

        /**
         * Auto generated setter method
         *
         * @param param Faultactor
         */
        public void setFaultactor(org.apache.axis2.databinding.types.URI param) {
            localFaultactorTracker = param != null;

            this.localFaultactor = param;
        }

        /** field for Detail */
        protected Detail localDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailTracker = false;

        public boolean isDetailSpecified() {
            return localDetailTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Detail
         */
        public Detail getDetail() {
            return localDetail;
        }

        /**
         * Auto generated setter method
         *
         * @param param Detail
         */
        public void setDetail(Detail param) {
            localDetailTracker = param != null;

            this.localDetail = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":FaultType",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "FaultType", xmlWriter);
                }
            }

            namespace = "";
            writeStartElement(null, namespace, "faultcode", xmlWriter);

            if (localFaultcode == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("faultcode cannot be null!!");

            } else {

                writeQName(localFaultcode, xmlWriter);
            }

            xmlWriter.writeEndElement();

            namespace = "";
            writeStartElement(null, namespace, "faultstring", xmlWriter);

            if (localFaultstring == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("faultstring cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localFaultstring);
            }

            xmlWriter.writeEndElement();
            if (localFaultactorTracker) {
                namespace = "";
                writeStartElement(null, namespace, "faultactor", xmlWriter);

                if (localFaultactor == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("faultactor cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFaultactor));
                }

                xmlWriter.writeEndElement();
            }
            if (localDetailTracker) {
                if (localDetail == null) {
                    throw new org.apache.axis2.databinding.ADBException("detail cannot be null!!");
                }
                localDetail.serialize(new javax.xml.namespace.QName("", "detail"), xmlWriter);
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static FaultType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                FaultType object = new FaultType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"FaultType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (FaultType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "faultcode").equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "faultcode" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        int index = content.indexOf(":");
                        if (index > 0) {
                            prefix = content.substring(0, index);
                        } else {
                            prefix = "";
                        }
                        namespaceuri = reader.getNamespaceURI(prefix);
                        object.setFaultcode(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(
                                        content, namespaceuri));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "faultstring").equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "faultstring" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFaultstring(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "faultactor").equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "faultactor" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFaultactor(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "detail").equals(reader.getName())) {

                        object.setDetail(Detail.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ChildFindCriteria extends FindCriteria
            implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ChildFindCriteria
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for ChildAttrName */
        protected java.lang.String localChildAttrName;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getChildAttrName() {
            return localChildAttrName;
        }

        /**
         * Auto generated setter method
         *
         * @param param ChildAttrName
         */
        public void setChildAttrName(java.lang.String param) {

            this.localChildAttrName = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            java.lang.String namespacePrefix =
                    registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                writeAttribute(
                        "xsi",
                        "http://www.w3.org/2001/XMLSchema-instance",
                        "type",
                        namespacePrefix + ":ChildFindCriteria",
                        xmlWriter);
            } else {
                writeAttribute(
                        "xsi",
                        "http://www.w3.org/2001/XMLSchema-instance",
                        "type",
                        "ChildFindCriteria",
                        xmlWriter);
            }

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "childAttrName", xmlWriter);

            if (localChildAttrName == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("childAttrName cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localChildAttrName);
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ChildFindCriteria parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ChildFindCriteria object = new ChildFindCriteria();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ChildFindCriteria".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ChildFindCriteria) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "childAttrName")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "childAttrName" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setChildAttrName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ServiceMessage implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ServiceMessage
    Namespace URI = http://xmlns.oracle.com/adf/svc/errors/
    Namespace Prefix = ns3
    */

        /** field for Code */
        protected java.lang.String localCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCodeTracker = false;

        public boolean isCodeSpecified() {
            return localCodeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getCode() {
            return localCode;
        }

        /**
         * Auto generated setter method
         *
         * @param param Code
         */
        public void setCode(java.lang.String param) {
            localCodeTracker = param != null;

            this.localCode = param;
        }

        /** field for Message */
        protected java.lang.String localMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessageTracker = false;

        public boolean isMessageSpecified() {
            return localMessageTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         *
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            localMessageTracker = param != null;

            this.localMessage = param;
        }

        /** field for Severity */
        protected java.lang.String localSeverity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSeverityTracker = false;

        public boolean isSeveritySpecified() {
            return localSeverityTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSeverity() {
            return localSeverity;
        }

        /**
         * Auto generated setter method
         *
         * @param param Severity
         */
        public void setSeverity(java.lang.String param) {
            localSeverityTracker = param != null;

            this.localSeverity = param;
        }

        /** field for Detail This was an Array! */
        protected ServiceMessage[] localDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailTracker = false;

        public boolean isDetailSpecified() {
            return localDetailTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ServiceMessage[]
         */
        public ServiceMessage[] getDetail() {
            return localDetail;
        }

        /** validate the array for Detail */
        protected void validateDetail(ServiceMessage[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param Detail
         */
        public void setDetail(ServiceMessage[] param) {

            validateDetail(param);

            localDetailTracker = param != null;

            this.localDetail = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param ServiceMessage
         */
        public void addDetail(ServiceMessage param) {
            if (localDetail == null) {
                localDetail = new ServiceMessage[] {};
            }

            // update the setting tracker
            localDetailTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDetail);
            list.add(param);
            this.localDetail = (ServiceMessage[]) list.toArray(new ServiceMessage[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/errors/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ServiceMessage",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ServiceMessage",
                            xmlWriter);
                }
            }
            if (localCodeTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "code", xmlWriter);

                if (localCode == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localCode);
                }

                xmlWriter.writeEndElement();
            }
            if (localMessageTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "message", xmlWriter);

                if (localMessage == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localMessage);
                }

                xmlWriter.writeEndElement();
            }
            if (localSeverityTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "severity", xmlWriter);

                if (localSeverity == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("severity cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localSeverity);
                }

                xmlWriter.writeEndElement();
            }
            if (localDetailTracker) {
                if (localDetail != null) {
                    for (int i = 0; i < localDetail.length; i++) {
                        if (localDetail[i] != null) {
                            localDetail[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/adf/svc/errors/", "detail"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("detail cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/errors/")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ServiceMessage parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ServiceMessage object = new ServiceMessage();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ServiceMessage".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ServiceMessage) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list4 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "code")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "code" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCode(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "message")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "message" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMessage(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/errors/", "severity")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "severity" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeverity(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "detail")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list4.add(ServiceMessage.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone4 = false;
                        while (!loopDone4) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone4 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/errors/", "detail")
                                        .equals(reader.getName())) {
                                    list4.add(ServiceMessage.Factory.parse(reader));

                                } else {
                                    loopDone4 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setDetail(
                                (ServiceMessage[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ServiceMessage.class, list4));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ValidateAndCreateAccounts implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                        "validateAndCreateAccounts",
                        "ns6");

        /** field for ValidationInputRowList This was an Array! */
        protected AccountValidationInput[] localValidationInputRowList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValidationInputRowListTracker = false;

        public boolean isValidationInputRowListSpecified() {
            return localValidationInputRowListTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return AccountValidationInput[]
         */
        public AccountValidationInput[] getValidationInputRowList() {
            return localValidationInputRowList;
        }

        /** validate the array for ValidationInputRowList */
        protected void validateValidationInputRowList(AccountValidationInput[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ValidationInputRowList
         */
        public void setValidationInputRowList(AccountValidationInput[] param) {

            validateValidationInputRowList(param);

            localValidationInputRowListTracker = param != null;

            this.localValidationInputRowList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param AccountValidationInput
         */
        public void addValidationInputRowList(AccountValidationInput param) {
            if (localValidationInputRowList == null) {
                localValidationInputRowList = new AccountValidationInput[] {};
            }

            // update the setting tracker
            localValidationInputRowListTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localValidationInputRowList);
            list.add(param);
            this.localValidationInputRowList =
                    (AccountValidationInput[]) list.toArray(new AccountValidationInput[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":validateAndCreateAccounts",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "validateAndCreateAccounts",
                            xmlWriter);
                }
            }
            if (localValidationInputRowListTracker) {
                if (localValidationInputRowList != null) {
                    for (int i = 0; i < localValidationInputRowList.length; i++) {
                        if (localValidationInputRowList[i] != null) {
                            localValidationInputRowList[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                            "validationInputRowList"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException(
                            "validationInputRowList cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/")) {
                return "ns6";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ValidateAndCreateAccounts parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ValidateAndCreateAccounts object = new ValidateAndCreateAccounts();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"validateAndCreateAccounts".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ValidateAndCreateAccounts)
                                        ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                            "validationInputRowList")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(AccountValidationInput.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                        "validationInputRowList")
                                        .equals(reader.getName())) {
                                    list1.add(AccountValidationInput.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setValidationInputRowList(
                                (AccountValidationInput[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                AccountValidationInput.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Datagraph implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "datagraph", "ns2");

        /** field for Datagraph */
        protected DataGraphType localDatagraph;

        /**
         * Auto generated getter method
         *
         * @return DataGraphType
         */
        public DataGraphType getDatagraph() {
            return localDatagraph;
        }

        /**
         * Auto generated setter method
         *
         * @param param Datagraph
         */
        public void setDatagraph(DataGraphType param) {

            this.localDatagraph = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localDatagraph == null) {
                throw new org.apache.axis2.databinding.ADBException("datagraph cannot be null!");
            }
            localDatagraph.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Datagraph parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Datagraph object = new Datagraph();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName("commonj.sdo", "datagraph")
                                    .equals(reader.getName())) {

                                object.setDatagraph(DataGraphType.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Conjunction implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/types/", "Conjunction", "ns4");

        /** field for Conjunction */
        protected java.lang.String localConjunction;

        private static java.util.HashMap _table_ = new java.util.HashMap();

        // Constructor

        protected Conjunction(java.lang.String value, boolean isRegisterValue) {
            localConjunction = value;
            if (isRegisterValue) {

                _table_.put(localConjunction, this);
            }
        }

        public static final java.lang.String _And =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("And");

        public static final java.lang.String _Or =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Or");

        public static final java.lang.String _Not =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Not");

        public static final java.lang.String _AndNot =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("AndNot");

        public static final java.lang.String _OrNot =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("OrNot");

        public static final Conjunction And = new Conjunction(_And, true);

        public static final Conjunction Or = new Conjunction(_Or, true);

        public static final Conjunction Not = new Conjunction(_Not, true);

        public static final Conjunction AndNot = new Conjunction(_AndNot, true);

        public static final Conjunction OrNot = new Conjunction(_OrNot, true);

        public java.lang.String getValue() {
            return localConjunction;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {

            return localConjunction.toString();
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":Conjunction",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Conjunction", xmlWriter);
                }
            }

            if (localConjunction == null) {

                throw new org.apache.axis2.databinding.ADBException("Conjunction cannot be null !!");

            } else {

                xmlWriter.writeCharacters(localConjunction);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static Conjunction fromValue(java.lang.String value)
                    throws java.lang.IllegalArgumentException {
                Conjunction enumeration = (Conjunction) _table_.get(value);

                // handle unexpected enumeration values properly
                if (enumeration == null) {

                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }

            public static Conjunction fromString(java.lang.String value, java.lang.String namespaceURI)
                    throws java.lang.IllegalArgumentException {
                try {

                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static Conjunction fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return Conjunction.Factory.fromString(content, namespaceUri);
                } else {
                    return Conjunction.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Conjunction parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Conjunction object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList =
                        new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            nillableValue =
                                    reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "Conjunction" + "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0, content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = Conjunction.Factory.fromString(content, namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = Conjunction.Factory.fromString(content, "");
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ViewCriteriaRow implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ViewCriteriaRow
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for Conjunction */
        protected Conjunction localConjunction;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localConjunctionTracker = false;

        public boolean isConjunctionSpecified() {
            return localConjunctionTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Conjunction
         */
        public Conjunction getConjunction() {
            return localConjunction;
        }

        /**
         * Auto generated setter method
         *
         * @param param Conjunction
         */
        public void setConjunction(Conjunction param) {
            localConjunctionTracker = param != null;

            this.localConjunction = param;
        }

        /** field for UpperCaseCompare */
        protected boolean localUpperCaseCompare =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getUpperCaseCompare() {
            return localUpperCaseCompare;
        }

        /**
         * Auto generated setter method
         *
         * @param param UpperCaseCompare
         */
        public void setUpperCaseCompare(boolean param) {

            this.localUpperCaseCompare = param;
        }

        /** field for Item This was an Array! */
        protected ViewCriteriaItem[] localItem;

        /**
         * Auto generated getter method
         *
         * @return ViewCriteriaItem[]
         */
        public ViewCriteriaItem[] getItem() {
            return localItem;
        }

        /** validate the array for Item */
        protected void validateItem(ViewCriteriaItem[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param Item
         */
        public void setItem(ViewCriteriaItem[] param) {

            validateItem(param);

            this.localItem = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param ViewCriteriaItem
         */
        public void addItem(ViewCriteriaItem param) {
            if (localItem == null) {
                localItem = new ViewCriteriaItem[] {};
            }

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
            list.add(param);
            this.localItem = (ViewCriteriaItem[]) list.toArray(new ViewCriteriaItem[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ViewCriteriaRow",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ViewCriteriaRow",
                            xmlWriter);
                }
            }
            if (localConjunctionTracker) {
                if (localConjunction == null) {
                    throw new org.apache.axis2.databinding.ADBException("conjunction cannot be null!!");
                }
                localConjunction.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "conjunction"),
                        xmlWriter);
            }
            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "upperCaseCompare", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException("upperCaseCompare cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localUpperCaseCompare));
            }

            xmlWriter.writeEndElement();

            if (localItem != null) {
                for (int i = 0; i < localItem.length; i++) {
                    if (localItem[i] != null) {
                        localItem[i].serialize(
                                new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "item"),
                                xmlWriter);
                    } else {

                        throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
                    }
                }
            } else {

                throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ViewCriteriaRow parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ViewCriteriaRow object = new ViewCriteriaRow();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ViewCriteriaRow".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ViewCriteriaRow) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "conjunction")
                            .equals(reader.getName())) {

                        object.setConjunction(Conjunction.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "upperCaseCompare")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "upperCaseCompare" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUpperCaseCompare(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "item")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list3.add(ViewCriteriaItem.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;
                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "item")
                                        .equals(reader.getName())) {
                                    list3.add(ViewCriteriaItem.Factory.parse(reader));

                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setItem(
                                (ViewCriteriaItem[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ViewCriteriaItem.class, list3));

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class TypesE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "types", "ns2");

        /** field for Types */
        protected Types localTypes;

        /**
         * Auto generated getter method
         *
         * @return Types
         */
        public Types getTypes() {
            return localTypes;
        }

        /**
         * Auto generated setter method
         *
         * @param param Types
         */
        public void setTypes(Types param) {

            this.localTypes = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localTypes == null) {
                throw new org.apache.axis2.databinding.ADBException("types cannot be null!");
            }
            localTypes.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static TypesE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                TypesE object = new TypesE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName("commonj.sdo", "types")
                                    .equals(reader.getName())) {

                                object.setTypes(Types.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class AccountValidationInput implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = AccountValidationInput
    Namespace URI = http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/
    Namespace Prefix = ns5
    */

        /** field for DynamicInsertion */
        protected java.lang.String localDynamicInsertion;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDynamicInsertionTracker = false;

        public boolean isDynamicInsertionSpecified() {
            return localDynamicInsertionTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getDynamicInsertion() {
            return localDynamicInsertion;
        }

        /**
         * Auto generated setter method
         *
         * @param param DynamicInsertion
         */
        public void setDynamicInsertion(java.lang.String param) {
            localDynamicInsertionTracker = true;

            this.localDynamicInsertion = param;
        }

        /** field for Segment1 */
        protected java.lang.String localSegment1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment1Tracker = false;

        public boolean isSegment1Specified() {
            return localSegment1Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment1() {
            return localSegment1;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment1
         */
        public void setSegment1(java.lang.String param) {
            //System.out.println("param::"+param);
            localSegment1Tracker = true;

            this.localSegment1 = param;
        }

        /** field for Segment2 */
        protected java.lang.String localSegment2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment2Tracker = false;

        public boolean isSegment2Specified() {
            return localSegment2Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment2() {
            return localSegment2;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment2
         */
        public void setSegment2(java.lang.String param) {
            localSegment2Tracker = true;

            this.localSegment2 = param;
        }

        /** field for Segment3 */
        protected java.lang.String localSegment3;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment3Tracker = false;

        public boolean isSegment3Specified() {
            return localSegment3Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment3() {
            return localSegment3;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment3
         */
        public void setSegment3(java.lang.String param) {
            localSegment3Tracker = true;

            this.localSegment3 = param;
        }

        /** field for Segment4 */
        protected java.lang.String localSegment4;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment4Tracker = false;

        public boolean isSegment4Specified() {
            return localSegment4Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment4() {
            return localSegment4;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment4
         */
        public void setSegment4(java.lang.String param) {
            localSegment4Tracker = true;

            this.localSegment4 = param;
        }

        /** field for Segment5 */
        protected java.lang.String localSegment5;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment5Tracker = false;

        public boolean isSegment5Specified() {
            return localSegment5Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment5() {
            return localSegment5;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment5
         */
        public void setSegment5(java.lang.String param) {
            localSegment5Tracker = true;

            this.localSegment5 = param;
        }

        /** field for Segment6 */
        protected java.lang.String localSegment6;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment6Tracker = false;

        public boolean isSegment6Specified() {
            return localSegment6Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment6() {
            return localSegment6;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment6
         */
        public void setSegment6(java.lang.String param) {
            localSegment6Tracker = true;

            this.localSegment6 = param;
        }

        /** field for Segment7 */
        protected java.lang.String localSegment7;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment7Tracker = false;

        public boolean isSegment7Specified() {
            return localSegment7Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment7() {
            return localSegment7;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment7
         */
        public void setSegment7(java.lang.String param) {
            localSegment7Tracker = true;

            this.localSegment7 = param;
        }

        /** field for Segment8 */
        protected java.lang.String localSegment8;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment8Tracker = false;

        public boolean isSegment8Specified() {
            return localSegment8Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment8() {
            return localSegment8;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment8
         */
        public void setSegment8(java.lang.String param) {
            localSegment8Tracker = true;

            this.localSegment8 = param;
        }

        /** field for Segment9 */
        protected java.lang.String localSegment9;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment9Tracker = false;

        public boolean isSegment9Specified() {
            return localSegment9Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment9() {
            return localSegment9;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment9
         */
        public void setSegment9(java.lang.String param) {
            localSegment9Tracker = true;

            this.localSegment9 = param;
        }

        /** field for Segment10 */
        protected java.lang.String localSegment10;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment10Tracker = false;

        public boolean isSegment10Specified() {
            return localSegment10Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment10() {
            return localSegment10;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment10
         */
        public void setSegment10(java.lang.String param) {
            localSegment10Tracker = true;

            this.localSegment10 = param;
        }

        /** field for Segment11 */
        protected java.lang.String localSegment11;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment11Tracker = false;

        public boolean isSegment11Specified() {
            return localSegment11Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment11() {
            return localSegment11;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment11
         */
        public void setSegment11(java.lang.String param) {
            localSegment11Tracker = true;

            this.localSegment11 = param;
        }

        /** field for Segment12 */
        protected java.lang.String localSegment12;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment12Tracker = false;

        public boolean isSegment12Specified() {
            return localSegment12Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment12() {
            return localSegment12;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment12
         */
        public void setSegment12(java.lang.String param) {
            localSegment12Tracker = true;

            this.localSegment12 = param;
        }

        /** field for Segment13 */
        protected java.lang.String localSegment13;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment13Tracker = false;

        public boolean isSegment13Specified() {
            return localSegment13Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment13() {
            return localSegment13;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment13
         */
        public void setSegment13(java.lang.String param) {
            localSegment13Tracker = true;

            this.localSegment13 = param;
        }

        /** field for Segment14 */
        protected java.lang.String localSegment14;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment14Tracker = false;

        public boolean isSegment14Specified() {
            return localSegment14Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment14() {
            return localSegment14;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment14
         */
        public void setSegment14(java.lang.String param) {
            localSegment14Tracker = true;

            this.localSegment14 = param;
        }

        /** field for Segment15 */
        protected java.lang.String localSegment15;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment15Tracker = false;

        public boolean isSegment15Specified() {
            return localSegment15Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment15() {
            return localSegment15;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment15
         */
        public void setSegment15(java.lang.String param) {
            localSegment15Tracker = true;

            this.localSegment15 = param;
        }

        /** field for Segment16 */
        protected java.lang.String localSegment16;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment16Tracker = false;

        public boolean isSegment16Specified() {
            return localSegment16Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment16() {
            return localSegment16;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment16
         */
        public void setSegment16(java.lang.String param) {
            localSegment16Tracker = true;

            this.localSegment16 = param;
        }

        /** field for Segment17 */
        protected java.lang.String localSegment17;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment17Tracker = false;

        public boolean isSegment17Specified() {
            return localSegment17Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment17() {
            return localSegment17;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment17
         */
        public void setSegment17(java.lang.String param) {
            localSegment17Tracker = true;

            this.localSegment17 = param;
        }

        /** field for Segment18 */
        protected java.lang.String localSegment18;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment18Tracker = false;

        public boolean isSegment18Specified() {
            return localSegment18Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment18() {
            return localSegment18;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment18
         */
        public void setSegment18(java.lang.String param) {
            localSegment18Tracker = true;

            this.localSegment18 = param;
        }

        /** field for Segment19 */
        protected java.lang.String localSegment19;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment19Tracker = false;

        public boolean isSegment19Specified() {
            return localSegment19Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment19() {
            return localSegment19;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment19
         */
        public void setSegment19(java.lang.String param) {
            localSegment19Tracker = true;

            this.localSegment19 = param;
        }

        /** field for Segment20 */
        protected java.lang.String localSegment20;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment20Tracker = false;

        public boolean isSegment20Specified() {
            return localSegment20Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment20() {
            return localSegment20;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment20
         */
        public void setSegment20(java.lang.String param) {
            localSegment20Tracker = true;

            this.localSegment20 = param;
        }

        /** field for Segment21 */
        protected java.lang.String localSegment21;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment21Tracker = false;

        public boolean isSegment21Specified() {
            return localSegment21Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment21() {
            return localSegment21;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment21
         */
        public void setSegment21(java.lang.String param) {
            localSegment21Tracker = true;

            this.localSegment21 = param;
        }

        /** field for Segment22 */
        protected java.lang.String localSegment22;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment22Tracker = false;

        public boolean isSegment22Specified() {
            return localSegment22Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment22() {
            return localSegment22;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment22
         */
        public void setSegment22(java.lang.String param) {
            localSegment22Tracker = true;

            this.localSegment22 = param;
        }

        /** field for Segment23 */
        protected java.lang.String localSegment23;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment23Tracker = false;

        public boolean isSegment23Specified() {
            return localSegment23Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment23() {
            return localSegment23;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment23
         */
        public void setSegment23(java.lang.String param) {
            localSegment23Tracker = true;

            this.localSegment23 = param;
        }

        /** field for Segment24 */
        protected java.lang.String localSegment24;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment24Tracker = false;

        public boolean isSegment24Specified() {
            return localSegment24Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment24() {
            return localSegment24;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment24
         */
        public void setSegment24(java.lang.String param) {
            localSegment24Tracker = true;

            this.localSegment24 = param;
        }

        /** field for Segment25 */
        protected java.lang.String localSegment25;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment25Tracker = false;

        public boolean isSegment25Specified() {
            return localSegment25Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment25() {
            return localSegment25;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment25
         */
        public void setSegment25(java.lang.String param) {
            localSegment25Tracker = true;

            this.localSegment25 = param;
        }

        /** field for Segment26 */
        protected java.lang.String localSegment26;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment26Tracker = false;

        public boolean isSegment26Specified() {
            return localSegment26Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment26() {
            return localSegment26;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment26
         */
        public void setSegment26(java.lang.String param) {
            localSegment26Tracker = true;

            this.localSegment26 = param;
        }

        /** field for Segment27 */
        protected java.lang.String localSegment27;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment27Tracker = false;

        public boolean isSegment27Specified() {
            return localSegment27Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment27() {
            return localSegment27;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment27
         */
        public void setSegment27(java.lang.String param) {
            localSegment27Tracker = true;

            this.localSegment27 = param;
        }

        /** field for Segment28 */
        protected java.lang.String localSegment28;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment28Tracker = false;

        public boolean isSegment28Specified() {
            return localSegment28Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment28() {
            return localSegment28;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment28
         */
        public void setSegment28(java.lang.String param) {
            localSegment28Tracker = true;

            this.localSegment28 = param;
        }

        /** field for Segment29 */
        protected java.lang.String localSegment29;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment29Tracker = false;

        public boolean isSegment29Specified() {
            return localSegment29Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment29() {
            return localSegment29;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment29
         */
        public void setSegment29(java.lang.String param) {
            localSegment29Tracker = true;

            this.localSegment29 = param;
        }

        /** field for Segment30 */
        protected java.lang.String localSegment30;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment30Tracker = false;

        public boolean isSegment30Specified() {
            return localSegment30Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment30() {
            return localSegment30;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment30
         */
        public void setSegment30(java.lang.String param) {
            localSegment30Tracker = true;

            this.localSegment30 = param;
        }

        /** field for LedgerName */
        protected java.lang.String localLedgerName;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getLedgerName() {
            return localLedgerName;
        }

        /**
         * Auto generated setter method
         *
         * @param param LedgerName
         */
        public void setLedgerName(java.lang.String param) {

            this.localLedgerName = param;
        }

        /** field for EnabledFlag */
        protected boolean localEnabledFlag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEnabledFlagTracker = false;

        public boolean isEnabledFlagSpecified() {
            return localEnabledFlagTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getEnabledFlag() {
            return localEnabledFlag;
        }

        /**
         * Auto generated setter method
         *
         * @param param EnabledFlag
         */
        public void setEnabledFlag(boolean param) {
            localEnabledFlagTracker = true;

            this.localEnabledFlag = param;
        }

        /** field for FromDate */
        protected DateDate localFromDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromDateTracker = false;

        public boolean isFromDateSpecified() {
            return localFromDateTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return DateDate
         */
        public DateDate getFromDate() {
            return localFromDate;
        }

        /**
         * Auto generated setter method
         *
         * @param param FromDate
         */
        public void setFromDate(DateDate param) {
            localFromDateTracker = true;

            this.localFromDate = param;
        }

        /** field for ToDate */
        protected DateDate localToDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToDateTracker = false;

        public boolean isToDateSpecified() {
            return localToDateTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return DateDate
         */
        public DateDate getToDate() {
            return localToDate;
        }

        /**
         * Auto generated setter method
         *
         * @param param ToDate
         */
        public void setToDate(DateDate param) {
            localToDateTracker = true;

            this.localToDate = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":AccountValidationInput",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "AccountValidationInput",
                            xmlWriter);
                }
            }
            if (localDynamicInsertionTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "DynamicInsertion", xmlWriter);

                if (localDynamicInsertion == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localDynamicInsertion);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment1Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment1", xmlWriter);

                if (localSegment1 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment1);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment2Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment2", xmlWriter);

                if (localSegment2 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment2);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment3Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment3", xmlWriter);

                if (localSegment3 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment3);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment4Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment4", xmlWriter);

                if (localSegment4 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment4);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment5Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment5", xmlWriter);

                if (localSegment5 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment5);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment6Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment6", xmlWriter);

                if (localSegment6 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment6);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment7Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment7", xmlWriter);

                if (localSegment7 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment7);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment8Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment8", xmlWriter);

                if (localSegment8 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment8);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment9Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment9", xmlWriter);

                if (localSegment9 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment9);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment10Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment10", xmlWriter);

                if (localSegment10 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment10);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment11Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment11", xmlWriter);

                if (localSegment11 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment11);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment12Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment12", xmlWriter);

                if (localSegment12 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment12);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment13Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment13", xmlWriter);

                if (localSegment13 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment13);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment14Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment14", xmlWriter);

                if (localSegment14 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment14);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment15Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment15", xmlWriter);

                if (localSegment15 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment15);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment16Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment16", xmlWriter);

                if (localSegment16 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment16);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment17Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment17", xmlWriter);

                if (localSegment17 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment17);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment18Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment18", xmlWriter);

                if (localSegment18 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment18);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment19Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment19", xmlWriter);

                if (localSegment19 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment19);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment20Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment20", xmlWriter);

                if (localSegment20 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment20);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment21Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment21", xmlWriter);

                if (localSegment21 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment21);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment22Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment22", xmlWriter);

                if (localSegment22 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment22);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment23Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment23", xmlWriter);

                if (localSegment23 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment23);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment24Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment24", xmlWriter);

                if (localSegment24 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment24);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment25Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment25", xmlWriter);

                if (localSegment25 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment25);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment26Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment26", xmlWriter);

                if (localSegment26 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment26);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment27Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment27", xmlWriter);

                if (localSegment27 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment27);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment28Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment28", xmlWriter);

                if (localSegment28 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment28);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment29Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment29", xmlWriter);

                if (localSegment29 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment29);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment30Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment30", xmlWriter);

                if (localSegment30 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment30);
                }

                xmlWriter.writeEndElement();
            }
            namespace =
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
            writeStartElement(null, namespace, "LedgerName", xmlWriter);

            if (localLedgerName == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("LedgerName cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localLedgerName);
            }

            xmlWriter.writeEndElement();
            if (localEnabledFlagTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "EnabledFlag", xmlWriter);

                if (false) {

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnabledFlag));
                }

                xmlWriter.writeEndElement();
            }
            if (localFromDateTracker) {
                if (localFromDate == null) {

                    writeStartElement(
                            null,
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "FromDate",
                            xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localFromDate.serialize(
                            new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "FromDate"),
                            xmlWriter);
                }
            }
            if (localToDateTracker) {
                if (localToDate == null) {

                    writeStartElement(
                            null,
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "ToDate",
                            xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localToDate.serialize(
                            new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "ToDate"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/")) {
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static AccountValidationInput parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                AccountValidationInput object = new AccountValidationInput();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"AccountValidationInput".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AccountValidationInput) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "DynamicInsertion")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setDynamicInsertion(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment1")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment1(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment2")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment2(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment3")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment3(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment4")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment4(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment5")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment5(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment6")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment6(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment7")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment7(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment8")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment8(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment9")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment9(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment10")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment10(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment11")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment11(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment12")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment12(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment13")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment13(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment14")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment14(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment15")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment15(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment16")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment16(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment17")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment17(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment18")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment18(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment19")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment19(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment20")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment20(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment21")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment21(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment22")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment22(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment23")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment23(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment24")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment24(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment25")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment25(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment26")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment26(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment27")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment27(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment28")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment28(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment29")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment29(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment30")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment30(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "LedgerName")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "LedgerName" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLedgerName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "EnabledFlag")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setEnabledFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "FromDate")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setFromDate(null);
                            reader.next();

                            reader.next();

                        } else {

                            object.setFromDate(DateDate.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "ToDate")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setToDate(null);
                            reader.next();

                            reader.next();

                        } else {

                            object.setToDate(DateDate.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ViewCriteriaItem implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ViewCriteriaItem
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for Conjunction */
        protected Conjunction localConjunction;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localConjunctionTracker = false;

        public boolean isConjunctionSpecified() {
            return localConjunctionTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Conjunction
         */
        public Conjunction getConjunction() {
            return localConjunction;
        }

        /**
         * Auto generated setter method
         *
         * @param param Conjunction
         */
        public void setConjunction(Conjunction param) {
            localConjunctionTracker = param != null;

            this.localConjunction = param;
        }

        /** field for UpperCaseCompare */
        protected boolean localUpperCaseCompare =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getUpperCaseCompare() {
            return localUpperCaseCompare;
        }

        /**
         * Auto generated setter method
         *
         * @param param UpperCaseCompare
         */
        public void setUpperCaseCompare(boolean param) {

            this.localUpperCaseCompare = param;
        }

        /** field for Attribute */
        protected java.lang.String localAttribute;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getAttribute() {
            return localAttribute;
        }

        /**
         * Auto generated setter method
         *
         * @param param Attribute
         */
        public void setAttribute(java.lang.String param) {

            this.localAttribute = param;
        }

        /** field for Operator */
        protected java.lang.String localOperator;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getOperator() {
            return localOperator;
        }

        /**
         * Auto generated setter method
         *
         * @param param Operator
         */
        public void setOperator(java.lang.String param) {

            this.localOperator = param;
        }

        /** field for ViewCriteriaItemChoice_type0 */
        protected ViewCriteriaItemChoice_type0 localViewCriteriaItemChoice_type0;

        /**
         * Auto generated getter method
         *
         * @return ViewCriteriaItemChoice_type0
         */
        public ViewCriteriaItemChoice_type0 getViewCriteriaItemChoice_type0() {
            return localViewCriteriaItemChoice_type0;
        }

        /**
         * Auto generated setter method
         *
         * @param param ViewCriteriaItemChoice_type0
         */
        public void setViewCriteriaItemChoice_type0(ViewCriteriaItemChoice_type0 param) {

            this.localViewCriteriaItemChoice_type0 = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ViewCriteriaItem",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ViewCriteriaItem",
                            xmlWriter);
                }
            }
            if (localConjunctionTracker) {
                if (localConjunction == null) {
                    throw new org.apache.axis2.databinding.ADBException("conjunction cannot be null!!");
                }
                localConjunction.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "conjunction"),
                        xmlWriter);
            }
            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "upperCaseCompare", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException("upperCaseCompare cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localUpperCaseCompare));
            }

            xmlWriter.writeEndElement();

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "attribute", xmlWriter);

            if (localAttribute == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("attribute cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localAttribute);
            }

            xmlWriter.writeEndElement();

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "operator", xmlWriter);

            if (localOperator == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("operator cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localOperator);
            }

            xmlWriter.writeEndElement();

            if (localViewCriteriaItemChoice_type0 == null) {
                throw new org.apache.axis2.databinding.ADBException(
                        "ViewCriteriaItemChoice_type0 cannot be null!!");
            }
            localViewCriteriaItemChoice_type0.serialize(null, xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ViewCriteriaItem parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ViewCriteriaItem object = new ViewCriteriaItem();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ViewCriteriaItem".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ViewCriteriaItem) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "conjunction")
                            .equals(reader.getName())) {

                        object.setConjunction(Conjunction.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "upperCaseCompare")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "upperCaseCompare" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUpperCaseCompare(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "attribute")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "attribute" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAttribute(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "operator")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "operator" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOperator(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        object.setViewCriteriaItemChoice_type0(
                                ViewCriteriaItemChoice_type0.Factory.parse(reader));
                    } // End of if for expected property start element

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class FindCriteriaE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/types/", "findCriteria", "ns4");

        /** field for FindCriteria */
        protected FindCriteria localFindCriteria;

        /**
         * Auto generated getter method
         *
         * @return FindCriteria
         */
        public FindCriteria getFindCriteria() {
            return localFindCriteria;
        }

        /**
         * Auto generated setter method
         *
         * @param param FindCriteria
         */
        public void setFindCriteria(FindCriteria param) {

            this.localFindCriteria = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localFindCriteria == null) {
                throw new org.apache.axis2.databinding.ADBException("findCriteria cannot be null!");
            }
            localFindCriteria.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static FindCriteriaE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                FindCriteriaE object = new FindCriteriaE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/adf/svc/types/", "findCriteria")
                                    .equals(reader.getName())) {

                                object.setFindCriteria(FindCriteria.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ValidateAndCreateAccountsResponse
            implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                        "validateAndCreateAccountsResponse",
                        "ns6");

        /** field for Result This was an Array! */
        protected AccountValidationOutput[] localResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResultTracker = false;

        public boolean isResultSpecified() {
            return localResultTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return AccountValidationOutput[]
         */
        public AccountValidationOutput[] getResult() {
            return localResult;
        }

        /** validate the array for Result */
        protected void validateResult(AccountValidationOutput[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param Result
         */
        public void setResult(AccountValidationOutput[] param) {

            validateResult(param);

            localResultTracker = param != null;

            this.localResult = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param AccountValidationOutput
         */
        public void addResult(AccountValidationOutput param) {
            if (localResult == null) {
                localResult = new AccountValidationOutput[] {};
            }

            // update the setting tracker
            localResultTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localResult);
            list.add(param);
            this.localResult =
                    (AccountValidationOutput[]) list.toArray(new AccountValidationOutput[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":validateAndCreateAccountsResponse",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "validateAndCreateAccountsResponse",
                            xmlWriter);
                }
            }
            if (localResultTracker) {
                if (localResult != null) {
                    for (int i = 0; i < localResult.length; i++) {
                        if (localResult[i] != null) {
                            localResult[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                            "result"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("result cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/")) {
                return "ns6";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ValidateAndCreateAccountsResponse parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ValidateAndCreateAccountsResponse object = new ValidateAndCreateAccountsResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"validateAndCreateAccountsResponse".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ValidateAndCreateAccountsResponse)
                                        ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                            "result")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(AccountValidationOutput.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                        "result")
                                        .equals(reader.getName())) {
                                    list1.add(AccountValidationOutput.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setResult(
                                (AccountValidationOutput[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                AccountValidationOutput.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ModelsType implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ModelsType
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ModelsType",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ModelsType", xmlWriter);
                }
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ModelsType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ModelsType object = new ModelsType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ModelsType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ModelsType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list1.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone1 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone1 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Type implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = Type
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for BaseType This was an Array! */
        protected URI[] localBaseType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBaseTypeTracker = false;

        public boolean isBaseTypeSpecified() {
            return localBaseTypeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return URI[]
         */
        public URI[] getBaseType() {
            return localBaseType;
        }

        /** validate the array for BaseType */
        protected void validateBaseType(URI[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param BaseType
         */
        public void setBaseType(URI[] param) {

            validateBaseType(param);

            localBaseTypeTracker = param != null;

            this.localBaseType = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param URI
         */
        public void addBaseType(URI param) {
            if (localBaseType == null) {
                localBaseType = new URI[] {};
            }

            // update the setting tracker
            localBaseTypeTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localBaseType);
            list.add(param);
            this.localBaseType = (URI[]) list.toArray(new URI[list.size()]);
        }

        /** field for Property This was an Array! */
        protected Property[] localProperty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPropertyTracker = false;

        public boolean isPropertySpecified() {
            return localPropertyTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Property[]
         */
        public Property[] getProperty() {
            return localProperty;
        }

        /** validate the array for Property */
        protected void validateProperty(Property[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param Property
         */
        public void setProperty(Property[] param) {

            validateProperty(param);

            localPropertyTracker = param != null;

            this.localProperty = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param Property
         */
        public void addProperty(Property param) {
            if (localProperty == null) {
                localProperty = new Property[] {};
            }

            // update the setting tracker
            localPropertyTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localProperty);
            list.add(param);
            this.localProperty = (Property[]) list.toArray(new Property[list.size()]);
        }

        /** field for AliasName This was an Array! */
        protected String[] localAliasName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAliasNameTracker = false;

        public boolean isAliasNameSpecified() {
            return localAliasNameTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return String[]
         */
        public String[] getAliasName() {
            return localAliasName;
        }

        /** validate the array for AliasName */
        protected void validateAliasName(String[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param AliasName
         */
        public void setAliasName(String[] param) {

            validateAliasName(param);

            localAliasNameTracker = param != null;

            this.localAliasName = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param String
         */
        public void addAliasName(String param) {
            if (localAliasName == null) {
                localAliasName = new String[] {};
            }

            // update the setting tracker
            localAliasNameTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAliasName);
            list.add(param);
            this.localAliasName = (String[]) list.toArray(new String[list.size()]);
        }

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /** field for Name This was an Attribute! */
        protected org.apache.axis2.databinding.types.Id localName;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axis2.databinding.types.Id
         */
        public org.apache.axis2.databinding.types.Id getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         *
         * @param param Name
         */
        public void setName(org.apache.axis2.databinding.types.Id param) {

            this.localName = param;
        }

        /** field for Uri This was an Attribute! */
        protected URI localUri;

        /**
         * Auto generated getter method
         *
         * @return URI
         */
        public URI getUri() {
            return localUri;
        }

        /**
         * Auto generated setter method
         *
         * @param param Uri
         */
        public void setUri(URI param) {

            this.localUri = param;
        }

        /** field for DataType This was an Attribute! */
        protected Boolean localDataType;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getDataType() {
            return localDataType;
        }

        /**
         * Auto generated setter method
         *
         * @param param DataType
         */
        public void setDataType(Boolean param) {

            this.localDataType = param;
        }

        /** field for Open This was an Attribute! */
        protected Boolean localOpen;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getOpen() {
            return localOpen;
        }

        /**
         * Auto generated setter method
         *
         * @param param Open
         */
        public void setOpen(Boolean param) {

            this.localOpen = param;
        }

        /** field for Sequenced This was an Attribute! */
        protected Boolean localSequenced;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getSequenced() {
            return localSequenced;
        }

        /**
         * Auto generated setter method
         *
         * @param param Sequenced
         */
        public void setSequenced(Boolean param) {

            this.localSequenced = param;
        }

        /** field for _abstract This was an Attribute! */
        protected Boolean local_abstract;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean get_abstract() {
            return local_abstract;
        }

        /**
         * Auto generated setter method
         *
         * @param param _abstract
         */
        public void set_abstract(Boolean param) {

            this.local_abstract = param;
        }

        /** field for ExtraAttributes This was an Attribute! This was an Array! */
        protected org.apache.axiom.om.OMAttribute[] localExtraAttributes;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMAttribute[]
         */
        public org.apache.axiom.om.OMAttribute[] getExtraAttributes() {
            return localExtraAttributes;
        }

        /** validate the array for ExtraAttributes */
        protected void validateExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            if ((param != null) && (param.length > 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param ExtraAttributes
         */
        public void setExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            validateExtraAttributes(param);

            this.localExtraAttributes = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMAttribute
         */
        public void addExtraAttributes(org.apache.axiom.om.OMAttribute param) {
            if (localExtraAttributes == null) {
                localExtraAttributes = new org.apache.axiom.om.OMAttribute[] {};
            }

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraAttributes);
            list.add(param);
            this.localExtraAttributes =
                    (org.apache.axiom.om.OMAttribute[])
                            list.toArray(new org.apache.axiom.om.OMAttribute[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":Type",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Type", xmlWriter);
                }
            }

            if (localName != null) {

                writeAttribute(
                        "",
                        "name",
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName),
                        xmlWriter);
            }

            if (localUri != null) {
                writeAttribute("", "uri", localUri.toString(), xmlWriter);
            }

            if (localDataType != null) {
                writeAttribute("", "dataType", localDataType.toString(), xmlWriter);
            }

            if (localOpen != null) {
                writeAttribute("", "open", localOpen.toString(), xmlWriter);
            }

            if (localSequenced != null) {
                writeAttribute("", "sequenced", localSequenced.toString(), xmlWriter);
            }

            if (local_abstract != null) {
                writeAttribute("", "abstract", local_abstract.toString(), xmlWriter);
            }

            if (localExtraAttributes != null) {
                for (int i = 0; i < localExtraAttributes.length; i++) {
                    writeAttribute(
                            localExtraAttributes[i].getNamespace().getName(),
                            localExtraAttributes[i].getLocalName(),
                            localExtraAttributes[i].getAttributeValue(),
                            xmlWriter);
                }
            }
            if (localBaseTypeTracker) {
                if (localBaseType != null) {
                    for (int i = 0; i < localBaseType.length; i++) {
                        if (localBaseType[i] != null) {
                            localBaseType[i].serialize(
                                    new javax.xml.namespace.QName("commonj.sdo", "baseType"), xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("baseType cannot be null!!");
                }
            }
            if (localPropertyTracker) {
                if (localProperty != null) {
                    for (int i = 0; i < localProperty.length; i++) {
                        if (localProperty[i] != null) {
                            localProperty[i].serialize(
                                    new javax.xml.namespace.QName("commonj.sdo", "property"), xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("property cannot be null!!");
                }
            }
            if (localAliasNameTracker) {
                if (localAliasName != null) {
                    for (int i = 0; i < localAliasName.length; i++) {
                        if (localAliasName[i] != null) {
                            localAliasName[i].serialize(
                                    new javax.xml.namespace.QName("commonj.sdo", "aliasName"), xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("aliasName cannot be null!!");
                }
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Type parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
                Type object = new Type();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"Type".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Type) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "name"
                    java.lang.String tempAttribName = reader.getAttributeValue(null, "name");

                    if (tempAttribName != null) {
                        java.lang.String content = tempAttribName;

                        object.setName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToID(tempAttribName));

                    } else {

                    }
                    handledAttributes.add("name");

                    // handle attribute "uri"
                    java.lang.String tempAttribUri = reader.getAttributeValue(null, "uri");

                    if (tempAttribUri != null) {
                        java.lang.String content = tempAttribUri;

                        object.setUri(URI.Factory.fromString(reader, tempAttribUri));

                    } else {

                    }
                    handledAttributes.add("uri");

                    // handle attribute "dataType"
                    java.lang.String tempAttribDataType = reader.getAttributeValue(null, "dataType");

                    if (tempAttribDataType != null) {
                        java.lang.String content = tempAttribDataType;

                        object.setDataType(Boolean.Factory.fromString(reader, tempAttribDataType));

                    } else {

                    }
                    handledAttributes.add("dataType");

                    // handle attribute "open"
                    java.lang.String tempAttribOpen = reader.getAttributeValue(null, "open");

                    if (tempAttribOpen != null) {
                        java.lang.String content = tempAttribOpen;

                        object.setOpen(Boolean.Factory.fromString(reader, tempAttribOpen));

                    } else {

                    }
                    handledAttributes.add("open");

                    // handle attribute "sequenced"
                    java.lang.String tempAttribSequenced = reader.getAttributeValue(null, "sequenced");

                    if (tempAttribSequenced != null) {
                        java.lang.String content = tempAttribSequenced;

                        object.setSequenced(Boolean.Factory.fromString(reader, tempAttribSequenced));

                    } else {

                    }
                    handledAttributes.add("sequenced");

                    // handle attribute "abstract"
                    java.lang.String tempAttrib_abstract = reader.getAttributeValue(null, "abstract");

                    if (tempAttrib_abstract != null) {
                        java.lang.String content = tempAttrib_abstract;

                        object.set_abstract(Boolean.Factory.fromString(reader, tempAttrib_abstract));

                    } else {

                    }
                    handledAttributes.add("abstract");

                    // now run through all any or extra attributes
                    // which were not reflected until now
                    for (int i = 0; i < reader.getAttributeCount(); i++) {
                        if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {
                            // this is an anyAttribute and we create
                            // an OMAttribute for this
                            org.apache.axiom.om.OMFactory factory =
                                    org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                            org.apache.axiom.om.OMAttribute attr =
                                    factory.createOMAttribute(
                                            reader.getAttributeLocalName(i),
                                            factory.createOMNamespace(
                                                    reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),
                                            reader.getAttributeValue(i));

                            // and add it to the extra attributes

                            object.addExtraAttributes(attr);
                        }
                    }

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    java.util.ArrayList list4 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("commonj.sdo", "baseType")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(URI.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("commonj.sdo", "baseType")
                                        .equals(reader.getName())) {
                                    list1.add(URI.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setBaseType(
                                (URI[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                URI.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("commonj.sdo", "property")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list2.add(Property.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;
                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("commonj.sdo", "property")
                                        .equals(reader.getName())) {
                                    list2.add(Property.Factory.parse(reader));

                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setProperty(
                                (Property[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                Property.class, list2));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("commonj.sdo", "aliasName")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list3.add(String.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;
                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("commonj.sdo", "aliasName")
                                        .equals(reader.getName())) {
                                    list3.add(String.Factory.parse(reader));

                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setAliasName(
                                (String[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                String.class, list3));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone4 = false;

                        while (!loopDone4) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list4.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone4 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone4 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list4));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ReturnMode implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/types/", "ReturnMode", "ns4");

        /** field for ReturnMode */
        protected java.lang.String localReturnMode;

        private static java.util.HashMap _table_ = new java.util.HashMap();

        // Constructor

        protected ReturnMode(java.lang.String value, boolean isRegisterValue) {
            localReturnMode = value;
            if (isRegisterValue) {

                _table_.put(localReturnMode, this);
            }
        }

        public static final java.lang.String _Full =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Full");

        public static final java.lang.String _Key =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Key");

        public static final java.lang.String _None =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString("None");

        public static final ReturnMode Full = new ReturnMode(_Full, true);

        public static final ReturnMode Key = new ReturnMode(_Key, true);

        public static final ReturnMode None = new ReturnMode(_None, true);

        public java.lang.String getValue() {
            return localReturnMode;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {

            return localReturnMode.toString();
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ReturnMode",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ReturnMode", xmlWriter);
                }
            }

            if (localReturnMode == null) {

                throw new org.apache.axis2.databinding.ADBException("ReturnMode cannot be null !!");

            } else {

                xmlWriter.writeCharacters(localReturnMode);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static ReturnMode fromValue(java.lang.String value)
                    throws java.lang.IllegalArgumentException {
                ReturnMode enumeration = (ReturnMode) _table_.get(value);

                // handle unexpected enumeration values properly
                if (enumeration == null) {

                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }

            public static ReturnMode fromString(java.lang.String value, java.lang.String namespaceURI)
                    throws java.lang.IllegalArgumentException {
                try {

                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static ReturnMode fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return ReturnMode.Factory.fromString(content, namespaceUri);
                } else {
                    return ReturnMode.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ReturnMode parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ReturnMode object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList =
                        new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            nillableValue =
                                    reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "ReturnMode" + "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0, content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = ReturnMode.Factory.fromString(content, namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = ReturnMode.Factory.fromString(content, "");
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ViewCriteriaItemChoice_type0 implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ViewCriteriaItemChoice_type0
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /**
         * Whenever a new property is set ensure all others are unset There can be only one choice and
         * the last one wins
         */
        private void clearAllSettingTrackers() {

            localValueTracker = false;

            localNestedTracker = false;
        }

        /** field for Value This was an Array! */
        protected java.lang.Object[] localValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValueTracker = false;

        public boolean isValueSpecified() {
            return localValueTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.Object[]
         */
        public java.lang.Object[] getValue() {
            return localValue;
        }

        /** validate the array for Value */
        protected void validateValue(java.lang.Object[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param Value
         */
        public void setValue(java.lang.Object[] param) {

            validateValue(param);

            clearAllSettingTrackers();
            localValueTracker = param != null;

            this.localValue = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param java.lang.Object
         */
        public void addValue(java.lang.Object param) {
            if (localValue == null) {
                localValue = new java.lang.Object[] {};
            }

            clearAllSettingTrackers();

            // update the setting tracker
            localValueTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localValue);
            list.add(param);
            this.localValue = (java.lang.Object[]) list.toArray(new java.lang.Object[list.size()]);
        }

        /** field for Nested */
        protected ViewCriteria localNested;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNestedTracker = false;

        public boolean isNestedSpecified() {
            return localNestedTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ViewCriteria
         */
        public ViewCriteria getNested() {
            return localNested;
        }

        /**
         * Auto generated setter method
         *
         * @param param Nested
         */
        public void setNested(ViewCriteria param) {

            clearAllSettingTrackers();
            localNestedTracker = param != null;

            this.localNested = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ViewCriteriaItemChoice_type0",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ViewCriteriaItemChoice_type0",
                            xmlWriter);
                }
            }
            if (localValueTracker) {
                if (localValue != null) {
                    namespace = "http://xmlns.oracle.com/adf/svc/types/";
                    for (int i = 0; i < localValue.length; i++) {

                        if (localValue[i] != null) {

                            writeStartElement(null, namespace, "value", xmlWriter);

                            xmlWriter.writeCharacters(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue[i]));

                            xmlWriter.writeEndElement();

                        } else {

                            // we have to do nothing since minOccurs is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("value cannot be null!!");
                }
            }
            if (localNestedTracker) {
                if (localNested == null) {
                    throw new org.apache.axis2.databinding.ADBException("nested cannot be null!!");
                }
                localNested.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "nested"),
                        xmlWriter);
            }
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ViewCriteriaItemChoice_type0 parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ViewCriteriaItemChoice_type0 object = new ViewCriteriaItemChoice_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "value")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(reader.getElementText());

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "value")
                                        .equals(reader.getName())) {
                                    list1.add(reader.getElementText());

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setValue(
                                (java.lang.Object[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                java.lang.Object.class, list1));

                    } // End of if for expected property start element
                    else if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "nested")
                            .equals(reader.getName())) {

                        object.setNested(ViewCriteria.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class TypeE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "type", "ns2");

        /** field for Type */
        protected Type localType;

        /**
         * Auto generated getter method
         *
         * @return Type
         */
        public Type getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         *
         * @param param Type
         */
        public void setType(Type param) {

            this.localType = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localType == null) {
                throw new org.apache.axis2.databinding.ADBException("type cannot be null!");
            }
            localType.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static TypeE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                TypeE object = new TypeE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName("commonj.sdo", "type")
                                    .equals(reader.getName())) {

                                object.setType(Type.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class DataObject implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "dataObject", "ns2");

        /** field for DataObject */
        protected java.lang.Object localDataObject;

        /**
         * Auto generated getter method
         *
         * @return java.lang.Object
         */
        public java.lang.Object getDataObject() {
            return localDataObject;
        }

        /**
         * Auto generated setter method
         *
         * @param param DataObject
         */
        public void setDataObject(java.lang.Object param) {

            this.localDataObject = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localDataObject instanceof org.apache.axis2.databinding.ADBBean) {
                ((org.apache.axis2.databinding.ADBBean) localDataObject)
                        .serialize(MY_QNAME, xmlWriter, true);
            } else {

                java.lang.String namespace = "commonj.sdo";
                java.lang.String _localName = "dataObject";

                writeStartElement(null, namespace, _localName, xmlWriter);

                // add the type details if this is used in a simple type
                if (serializeType) {
                    java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                    if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                        writeAttribute(
                                "xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type",
                                namespacePrefix + ":dataObject",
                                xmlWriter);
                    } else {
                        writeAttribute(
                                "xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type",
                                "dataObject",
                                xmlWriter);
                    }
                }

                if (localDataObject == null) {

                    throw new org.apache.axis2.databinding.ADBException("dataObject cannot be null !!");

                } else {

                    org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(
                            localDataObject, xmlWriter);
                }

                xmlWriter.writeEndElement();
            }
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static DataObject parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                DataObject object = new DataObject();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName("commonj.sdo", "dataObject")
                                    .equals(reader.getName())) {

                                object.setDataObject(
                                        org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(
                                                reader, ExtensionMapper.class));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ValidateAndCreateAccountsAsync
            implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                        "validateAndCreateAccountsAsync",
                        "ns6");

        /** field for ValidationInputRowList This was an Array! */
        protected AccountValidationInput[] localValidationInputRowList;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValidationInputRowListTracker = false;

        public boolean isValidationInputRowListSpecified() {
            return localValidationInputRowListTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return AccountValidationInput[]
         */
        public AccountValidationInput[] getValidationInputRowList() {
            return localValidationInputRowList;
        }

        /** validate the array for ValidationInputRowList */
        protected void validateValidationInputRowList(AccountValidationInput[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ValidationInputRowList
         */
        public void setValidationInputRowList(AccountValidationInput[] param) {

            validateValidationInputRowList(param);

            localValidationInputRowListTracker = param != null;

            this.localValidationInputRowList = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param AccountValidationInput
         */
        public void addValidationInputRowList(AccountValidationInput param) {
            if (localValidationInputRowList == null) {
                localValidationInputRowList = new AccountValidationInput[] {};
            }

            // update the setting tracker
            localValidationInputRowListTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localValidationInputRowList);
            list.add(param);
            this.localValidationInputRowList =
                    (AccountValidationInput[]) list.toArray(new AccountValidationInput[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":validateAndCreateAccountsAsync",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "validateAndCreateAccountsAsync",
                            xmlWriter);
                }
            }
            if (localValidationInputRowListTracker) {
                if (localValidationInputRowList != null) {
                    for (int i = 0; i < localValidationInputRowList.length; i++) {
                        if (localValidationInputRowList[i] != null) {
                            localValidationInputRowList[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                            "validationInputRowList"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException(
                            "validationInputRowList cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/")) {
                return "ns6";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ValidateAndCreateAccountsAsync parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ValidateAndCreateAccountsAsync object = new ValidateAndCreateAccountsAsync();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"validateAndCreateAccountsAsync".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ValidateAndCreateAccountsAsync)
                                        ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                            "validationInputRowList")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(AccountValidationInput.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                        "validationInputRowList")
                                        .equals(reader.getName())) {
                                    list1.add(AccountValidationInput.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setValidationInputRowList(
                                (AccountValidationInput[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                AccountValidationInput.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class DataGraphType extends BaseDataGraphType
            implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = DataGraphType
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for ExtraElement */
        protected org.apache.axiom.om.OMElement localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getExtraElement() {
            return localExtraElement;
        }

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement param) {
            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                writeAttribute(
                        "xsi",
                        "http://www.w3.org/2001/XMLSchema-instance",
                        "type",
                        namespacePrefix + ":DataGraphType",
                        xmlWriter);
            } else {
                writeAttribute(
                        "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DataGraphType", xmlWriter);
            }

            if (localExtraAttributes != null) {
                for (int i = 0; i < localExtraAttributes.length; i++) {
                    writeAttribute(
                            localExtraAttributes[i].getNamespace().getName(),
                            localExtraAttributes[i].getLocalName(),
                            localExtraAttributes[i].getAttributeValue(),
                            xmlWriter);
                }
            }
            if (localModelsTracker) {
                if (localModels == null) {
                    throw new org.apache.axis2.databinding.ADBException("models cannot be null!!");
                }
                localModels.serialize(new javax.xml.namespace.QName("", "models"), xmlWriter);
            }
            if (localXsdTracker) {
                if (localXsd == null) {
                    throw new org.apache.axis2.databinding.ADBException("xsd cannot be null!!");
                }
                localXsd.serialize(new javax.xml.namespace.QName("", "xsd"), xmlWriter);
            }
            if (localChangeSummaryTracker) {
                if (localChangeSummary == null) {
                    throw new org.apache.axis2.databinding.ADBException("changeSummary cannot be null!!");
                }
                localChangeSummary.serialize(new javax.xml.namespace.QName("", "changeSummary"), xmlWriter);
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    localExtraElement.serialize(xmlWriter);
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static DataGraphType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                DataGraphType object = new DataGraphType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"DataGraphType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DataGraphType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // now run through all any or extra attributes
                    // which were not reflected until now
                    for (int i = 0; i < reader.getAttributeCount(); i++) {
                        if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {
                            // this is an anyAttribute and we create
                            // an OMAttribute for this
                            org.apache.axiom.om.OMFactory factory =
                                    org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                            org.apache.axiom.om.OMAttribute attr =
                                    factory.createOMAttribute(
                                            reader.getAttributeLocalName(i),
                                            factory.createOMNamespace(
                                                    reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),
                                            reader.getAttributeValue(i));

                            // and add it to the extra attributes

                            object.addExtraAttributes(attr);
                        }
                    }

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "models").equals(reader.getName())) {

                        object.setModels(ModelsType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "xsd").equals(reader.getName())) {

                        object.setXsd(XSDType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "changeSummary").equals(reader.getName())) {

                        object.setChangeSummary(ChangeSummaryType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        object.setExtraElement(
                                org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, false));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class AccountValidationOutput implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = AccountValidationOutput
    Namespace URI = http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/
    Namespace Prefix = ns5
    */

        /** field for Segment1 */
        protected java.lang.String localSegment1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment1Tracker = false;

        public boolean isSegment1Specified() {
            return localSegment1Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment1() {
            System.out.println(localSegment1+":::localSegment1");
            return localSegment1;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment1
         */
        public void setSegment1(java.lang.String param) {
            localSegment1Tracker = true;

            this.localSegment1 = param;
        }

        /** field for Segment2 */
        protected java.lang.String localSegment2;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment2Tracker = false;

        public boolean isSegment2Specified() {
            return localSegment2Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment2() {
            return localSegment2;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment2
         */
        public void setSegment2(java.lang.String param) {
            localSegment2Tracker = true;

            this.localSegment2 = param;
        }

        /** field for Segment3 */
        protected java.lang.String localSegment3;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment3Tracker = false;

        public boolean isSegment3Specified() {
            return localSegment3Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment3() {
            return localSegment3;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment3
         */
        public void setSegment3(java.lang.String param) {
            localSegment3Tracker = true;

            this.localSegment3 = param;
        }

        /** field for Segment4 */
        protected java.lang.String localSegment4;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment4Tracker = false;

        public boolean isSegment4Specified() {
            return localSegment4Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment4() {
            return localSegment4;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment4
         */
        public void setSegment4(java.lang.String param) {
            localSegment4Tracker = true;

            this.localSegment4 = param;
        }

        /** field for Segment5 */
        protected java.lang.String localSegment5;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment5Tracker = false;

        public boolean isSegment5Specified() {
            return localSegment5Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment5() {
            return localSegment5;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment5
         */
        public void setSegment5(java.lang.String param) {
            localSegment5Tracker = true;

            this.localSegment5 = param;
        }

        /** field for Segment6 */
        protected java.lang.String localSegment6;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment6Tracker = false;

        public boolean isSegment6Specified() {
            return localSegment6Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment6() {
            return localSegment6;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment6
         */
        public void setSegment6(java.lang.String param) {
            localSegment6Tracker = true;

            this.localSegment6 = param;
        }

        /** field for Segment7 */
        protected java.lang.String localSegment7;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment7Tracker = false;

        public boolean isSegment7Specified() {
            return localSegment7Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment7() {
            return localSegment7;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment7
         */
        public void setSegment7(java.lang.String param) {
            localSegment7Tracker = true;

            this.localSegment7 = param;
        }

        /** field for Segment8 */
        protected java.lang.String localSegment8;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment8Tracker = false;

        public boolean isSegment8Specified() {
            return localSegment8Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment8() {
            return localSegment8;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment8
         */
        public void setSegment8(java.lang.String param) {
            localSegment8Tracker = true;

            this.localSegment8 = param;
        }

        /** field for Segment9 */
        protected java.lang.String localSegment9;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment9Tracker = false;

        public boolean isSegment9Specified() {
            return localSegment9Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment9() {
            return localSegment9;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment9
         */
        public void setSegment9(java.lang.String param) {
            localSegment9Tracker = true;

            this.localSegment9 = param;
        }

        /** field for Segment10 */
        protected java.lang.String localSegment10;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment10Tracker = false;

        public boolean isSegment10Specified() {
            return localSegment10Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment10() {
            return localSegment10;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment10
         */
        public void setSegment10(java.lang.String param) {
            localSegment10Tracker = true;

            this.localSegment10 = param;
        }

        /** field for Segment11 */
        protected java.lang.String localSegment11;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment11Tracker = false;

        public boolean isSegment11Specified() {
            return localSegment11Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment11() {
            return localSegment11;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment11
         */
        public void setSegment11(java.lang.String param) {
            localSegment11Tracker = true;

            this.localSegment11 = param;
        }

        /** field for Segment12 */
        protected java.lang.String localSegment12;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment12Tracker = false;

        public boolean isSegment12Specified() {
            return localSegment12Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment12() {
            return localSegment12;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment12
         */
        public void setSegment12(java.lang.String param) {
            localSegment12Tracker = true;

            this.localSegment12 = param;
        }

        /** field for Segment13 */
        protected java.lang.String localSegment13;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment13Tracker = false;

        public boolean isSegment13Specified() {
            return localSegment13Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment13() {
            return localSegment13;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment13
         */
        public void setSegment13(java.lang.String param) {
            localSegment13Tracker = true;

            this.localSegment13 = param;
        }

        /** field for Segment14 */
        protected java.lang.String localSegment14;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment14Tracker = false;

        public boolean isSegment14Specified() {
            return localSegment14Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment14() {
            return localSegment14;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment14
         */
        public void setSegment14(java.lang.String param) {
            localSegment14Tracker = true;

            this.localSegment14 = param;
        }

        /** field for Segment15 */
        protected java.lang.String localSegment15;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment15Tracker = false;

        public boolean isSegment15Specified() {
            return localSegment15Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment15() {
            return localSegment15;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment15
         */
        public void setSegment15(java.lang.String param) {
            localSegment15Tracker = true;

            this.localSegment15 = param;
        }

        /** field for Segment16 */
        protected java.lang.String localSegment16;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment16Tracker = false;

        public boolean isSegment16Specified() {
            return localSegment16Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment16() {
            return localSegment16;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment16
         */
        public void setSegment16(java.lang.String param) {
            localSegment16Tracker = true;

            this.localSegment16 = param;
        }

        /** field for Segment17 */
        protected java.lang.String localSegment17;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment17Tracker = false;

        public boolean isSegment17Specified() {
            return localSegment17Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment17() {
            return localSegment17;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment17
         */
        public void setSegment17(java.lang.String param) {
            localSegment17Tracker = true;

            this.localSegment17 = param;
        }

        /** field for Segment18 */
        protected java.lang.String localSegment18;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment18Tracker = false;

        public boolean isSegment18Specified() {
            return localSegment18Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment18() {
            return localSegment18;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment18
         */
        public void setSegment18(java.lang.String param) {
            localSegment18Tracker = true;

            this.localSegment18 = param;
        }

        /** field for Segment19 */
        protected java.lang.String localSegment19;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment19Tracker = false;

        public boolean isSegment19Specified() {
            return localSegment19Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment19() {
            return localSegment19;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment19
         */
        public void setSegment19(java.lang.String param) {
            localSegment19Tracker = true;

            this.localSegment19 = param;
        }

        /** field for Segment20 */
        protected java.lang.String localSegment20;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment20Tracker = false;

        public boolean isSegment20Specified() {
            return localSegment20Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment20() {
            return localSegment20;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment20
         */
        public void setSegment20(java.lang.String param) {
            localSegment20Tracker = true;

            this.localSegment20 = param;
        }

        /** field for Segment21 */
        protected java.lang.String localSegment21;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment21Tracker = false;

        public boolean isSegment21Specified() {
            return localSegment21Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment21() {
            return localSegment21;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment21
         */
        public void setSegment21(java.lang.String param) {
            localSegment21Tracker = true;

            this.localSegment21 = param;
        }

        /** field for Segment22 */
        protected java.lang.String localSegment22;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment22Tracker = false;

        public boolean isSegment22Specified() {
            return localSegment22Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment22() {
            return localSegment22;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment22
         */
        public void setSegment22(java.lang.String param) {
            localSegment22Tracker = true;

            this.localSegment22 = param;
        }

        /** field for Segment23 */
        protected java.lang.String localSegment23;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment23Tracker = false;

        public boolean isSegment23Specified() {
            return localSegment23Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment23() {
            return localSegment23;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment23
         */
        public void setSegment23(java.lang.String param) {
            localSegment23Tracker = true;

            this.localSegment23 = param;
        }

        /** field for Segment24 */
        protected java.lang.String localSegment24;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment24Tracker = false;

        public boolean isSegment24Specified() {
            return localSegment24Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment24() {
            return localSegment24;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment24
         */
        public void setSegment24(java.lang.String param) {
            localSegment24Tracker = true;

            this.localSegment24 = param;
        }

        /** field for Segment25 */
        protected java.lang.String localSegment25;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment25Tracker = false;

        public boolean isSegment25Specified() {
            return localSegment25Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment25() {
            return localSegment25;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment25
         */
        public void setSegment25(java.lang.String param) {
            localSegment25Tracker = true;

            this.localSegment25 = param;
        }

        /** field for Segment26 */
        protected java.lang.String localSegment26;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment26Tracker = false;

        public boolean isSegment26Specified() {
            return localSegment26Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment26() {
            return localSegment26;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment26
         */
        public void setSegment26(java.lang.String param) {
            localSegment26Tracker = true;

            this.localSegment26 = param;
        }

        /** field for Segment27 */
        protected java.lang.String localSegment27;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment27Tracker = false;

        public boolean isSegment27Specified() {
            return localSegment27Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment27() {
            return localSegment27;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment27
         */
        public void setSegment27(java.lang.String param) {
            localSegment27Tracker = true;

            this.localSegment27 = param;
        }

        /** field for Segment28 */
        protected java.lang.String localSegment28;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment28Tracker = false;

        public boolean isSegment28Specified() {
            return localSegment28Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment28() {
            return localSegment28;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment28
         */
        public void setSegment28(java.lang.String param) {
            localSegment28Tracker = true;

            this.localSegment28 = param;
        }

        /** field for Segment29 */
        protected java.lang.String localSegment29;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment29Tracker = false;

        public boolean isSegment29Specified() {
            return localSegment29Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment29() {
            return localSegment29;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment29
         */
        public void setSegment29(java.lang.String param) {
            localSegment29Tracker = true;

            this.localSegment29 = param;
        }

        /** field for Segment30 */
        protected java.lang.String localSegment30;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSegment30Tracker = false;

        public boolean isSegment30Specified() {
            return localSegment30Tracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getSegment30() {
            return localSegment30;
        }

        /**
         * Auto generated setter method
         *
         * @param param Segment30
         */
        public void setSegment30(java.lang.String param) {
            localSegment30Tracker = true;

            this.localSegment30 = param;
        }

        /** field for Status */
        protected java.lang.String localStatus;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         *
         * @param param Status
         */
        public void setStatus(java.lang.String param) {

            this.localStatus = param;
        }

        /** field for LedgerName */
        protected java.lang.String localLedgerName;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getLedgerName() {
            return localLedgerName;
        }

        /**
         * Auto generated setter method
         *
         * @param param LedgerName
         */
        public void setLedgerName(java.lang.String param) {

            this.localLedgerName = param;
        }

        /** field for CcId */
        protected long localCcId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCcIdTracker = false;

        public boolean isCcIdSpecified() {
            return localCcIdTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return long
         */
        public long getCcId() {
            return localCcId;
        }

        /**
         * Auto generated setter method
         *
         * @param param CcId
         */
        public void setCcId(long param) {
            localCcIdTracker = true;

            this.localCcId = param;
        }

        /** field for Error */
        protected java.lang.String localError;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrorTracker = false;

        public boolean isErrorSpecified() {
            return localErrorTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getError() {
            return localError;
        }

        /**
         * Auto generated setter method
         *
         * @param param Error
         */
        public void setError(java.lang.String param) {
            localErrorTracker = true;

            this.localError = param;
        }

        /** field for ErrorCode */
        protected java.lang.String localErrorCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrorCodeTracker = false;

        public boolean isErrorCodeSpecified() {
            return localErrorCodeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getErrorCode() {
            return localErrorCode;
        }

        /**
         * Auto generated setter method
         *
         * @param param ErrorCode
         */
        public void setErrorCode(java.lang.String param) {
            localErrorCodeTracker = true;

            this.localErrorCode = param;
        }

        /** field for EnabledFlag */
        protected boolean localEnabledFlag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEnabledFlagTracker = false;

        public boolean isEnabledFlagSpecified() {
            return localEnabledFlagTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getEnabledFlag() {
            return localEnabledFlag;
        }

        /**
         * Auto generated setter method
         *
         * @param param EnabledFlag
         */
        public void setEnabledFlag(boolean param) {
            localEnabledFlagTracker = true;

            this.localEnabledFlag = param;
        }

        /** field for FromDate */
        protected DateDate localFromDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromDateTracker = false;

        public boolean isFromDateSpecified() {
            return localFromDateTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return DateDate
         */
        public DateDate getFromDate() {
            return localFromDate;
        }

        /**
         * Auto generated setter method
         *
         * @param param FromDate
         */
        public void setFromDate(DateDate param) {
            localFromDateTracker = true;

            this.localFromDate = param;
        }

        /** field for ToDate */
        protected DateDate localToDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToDateTracker = false;

        public boolean isToDateSpecified() {
            return localToDateTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return DateDate
         */
        public DateDate getToDate() {
            return localToDate;
        }

        /**
         * Auto generated setter method
         *
         * @param param ToDate
         */
        public void setToDate(DateDate param) {
            localToDateTracker = true;

            this.localToDate = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":AccountValidationOutput",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "AccountValidationOutput",
                            xmlWriter);
                }
            }
            if (localSegment1Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment1", xmlWriter);

                if (localSegment1 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment1);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment2Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment2", xmlWriter);

                if (localSegment2 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment2);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment3Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment3", xmlWriter);

                if (localSegment3 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment3);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment4Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment4", xmlWriter);

                if (localSegment4 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment4);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment5Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment5", xmlWriter);

                if (localSegment5 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment5);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment6Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment6", xmlWriter);

                if (localSegment6 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment6);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment7Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment7", xmlWriter);

                if (localSegment7 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment7);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment8Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment8", xmlWriter);

                if (localSegment8 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment8);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment9Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment9", xmlWriter);

                if (localSegment9 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment9);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment10Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment10", xmlWriter);

                if (localSegment10 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment10);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment11Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment11", xmlWriter);

                if (localSegment11 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment11);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment12Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment12", xmlWriter);

                if (localSegment12 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment12);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment13Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment13", xmlWriter);

                if (localSegment13 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment13);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment14Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment14", xmlWriter);

                if (localSegment14 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment14);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment15Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment15", xmlWriter);

                if (localSegment15 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment15);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment16Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment16", xmlWriter);

                if (localSegment16 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment16);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment17Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment17", xmlWriter);

                if (localSegment17 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment17);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment18Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment18", xmlWriter);

                if (localSegment18 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment18);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment19Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment19", xmlWriter);

                if (localSegment19 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment19);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment20Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment20", xmlWriter);

                if (localSegment20 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment20);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment21Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment21", xmlWriter);

                if (localSegment21 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment21);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment22Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment22", xmlWriter);

                if (localSegment22 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment22);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment23Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment23", xmlWriter);

                if (localSegment23 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment23);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment24Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment24", xmlWriter);

                if (localSegment24 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment24);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment25Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment25", xmlWriter);

                if (localSegment25 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment25);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment26Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment26", xmlWriter);

                if (localSegment26 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment26);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment27Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment27", xmlWriter);

                if (localSegment27 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment27);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment28Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment28", xmlWriter);

                if (localSegment28 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment28);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment29Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment29", xmlWriter);

                if (localSegment29 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment29);
                }

                xmlWriter.writeEndElement();
            }
            if (localSegment30Tracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Segment30", xmlWriter);

                if (localSegment30 == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localSegment30);
                }

                xmlWriter.writeEndElement();
            }
            namespace =
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
            writeStartElement(null, namespace, "Status", xmlWriter);

            if (localStatus == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("Status cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localStatus);
            }

            xmlWriter.writeEndElement();

            namespace =
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
            writeStartElement(null, namespace, "LedgerName", xmlWriter);

            if (localLedgerName == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("LedgerName cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localLedgerName);
            }

            xmlWriter.writeEndElement();
            if (localCcIdTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "CcId", xmlWriter);

                if (localCcId == java.lang.Long.MIN_VALUE) {

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCcId));
                }

                xmlWriter.writeEndElement();
            }
            if (localErrorTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "Error", xmlWriter);

                if (localError == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localError);
                }

                xmlWriter.writeEndElement();
            }
            if (localErrorCodeTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "ErrorCode", xmlWriter);

                if (localErrorCode == null) {
                    // write the nil attribute

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {

                    xmlWriter.writeCharacters(localErrorCode);
                }

                xmlWriter.writeEndElement();
            }
            if (localEnabledFlagTracker) {
                namespace =
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/";
                writeStartElement(null, namespace, "EnabledFlag", xmlWriter);

                if (false) {

                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

                } else {
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnabledFlag));
                }

                xmlWriter.writeEndElement();
            }
            if (localFromDateTracker) {
                if (localFromDate == null) {

                    writeStartElement(
                            null,
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "FromDate",
                            xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localFromDate.serialize(
                            new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "FromDate"),
                            xmlWriter);
                }
            }
            if (localToDateTracker) {
                if (localToDate == null) {

                    writeStartElement(
                            null,
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "ToDate",
                            xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localToDate.serialize(
                            new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                                    "ToDate"),
                            xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/")) {
                return "ns5";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static AccountValidationOutput parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                AccountValidationOutput object = new AccountValidationOutput();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"AccountValidationOutput".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AccountValidationOutput) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment1")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment1(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment2")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment2(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment3")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment3(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment4")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment4(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment5")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment5(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment6")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment6(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment7")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment7(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment8")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment8(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment9")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment9(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment10")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment10(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment11")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment11(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment12")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment12(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment13")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment13(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment14")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment14(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment15")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment15(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment16")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment16(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment17")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment17(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment18")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment18(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment19")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment19(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment20")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment20(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment21")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment21(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment22")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment22(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment23")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment23(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment24")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment24(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment25")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment25(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment26")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment26(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment27")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment27(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment28")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment28(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment29")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment29(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Segment30")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setSegment30(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Status")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "Status" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatus(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "LedgerName")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "LedgerName" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLedgerName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "CcId")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setCcId(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

                        } else {

                            object.setCcId(java.lang.Long.MIN_VALUE);

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                        object.setCcId(java.lang.Long.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "Error")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setError(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "ErrorCode")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setErrorCode(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "EnabledFlag")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

                            java.lang.String content = reader.getElementText();

                            object.setEnabledFlag(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        } else {

                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "FromDate")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setFromDate(null);
                            reader.next();

                            reader.next();

                        } else {

                            object.setFromDate(DateDate.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/",
                            "ToDate")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setToDate(null);
                            reader.next();

                            reader.next();

                        } else {

                            object.setToDate(DateDate.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class

        @Override
        public java.lang.String toString() {
            return "AccountValidationOutput{" +
                    "localSegment1='" + localSegment1 + '\'' +
                    ", localSegment1Tracker=" + localSegment1Tracker +
                    ", localSegment2='" + localSegment2 + '\'' +
                    ", localSegment2Tracker=" + localSegment2Tracker +
                    ", localSegment3='" + localSegment3 + '\'' +
                    ", localSegment3Tracker=" + localSegment3Tracker +
                    ", localSegment4='" + localSegment4 + '\'' +
                    ", localSegment4Tracker=" + localSegment4Tracker +
                    ", localSegment5='" + localSegment5 + '\'' +
                    ", localSegment5Tracker=" + localSegment5Tracker +
                    ", localSegment6='" + localSegment6 + '\'' +
                    ", localSegment6Tracker=" + localSegment6Tracker +
                    ", localSegment7='" + localSegment7 + '\'' +
                    ", localSegment7Tracker=" + localSegment7Tracker +
                    ", localSegment8='" + localSegment8 + '\'' +
                    ", localSegment8Tracker=" + localSegment8Tracker +
                    ", localSegment9='" + localSegment9 + '\'' +
                    ", localSegment9Tracker=" + localSegment9Tracker +
                    ", localSegment10='" + localSegment10 + '\'' +
                    ", localSegment10Tracker=" + localSegment10Tracker +
                    ", localSegment11='" + localSegment11 + '\'' +
                    ", localSegment11Tracker=" + localSegment11Tracker +
                    ", localSegment12='" + localSegment12 + '\'' +
                    ", localSegment12Tracker=" + localSegment12Tracker +
                    ", localSegment13='" + localSegment13 + '\'' +
                    ", localSegment13Tracker=" + localSegment13Tracker +
                    ", localSegment14='" + localSegment14 + '\'' +
                    ", localSegment14Tracker=" + localSegment14Tracker +
                    ", localSegment15='" + localSegment15 + '\'' +
                    ", localSegment15Tracker=" + localSegment15Tracker +
                    ", localSegment16='" + localSegment16 + '\'' +
                    ", localSegment16Tracker=" + localSegment16Tracker +
                    ", localSegment17='" + localSegment17 + '\'' +
                    ", localSegment17Tracker=" + localSegment17Tracker +
                    ", localSegment18='" + localSegment18 + '\'' +
                    ", localSegment18Tracker=" + localSegment18Tracker +
                    ", localSegment19='" + localSegment19 + '\'' +
                    ", localSegment19Tracker=" + localSegment19Tracker +
                    ", localSegment20='" + localSegment20 + '\'' +
                    ", localSegment20Tracker=" + localSegment20Tracker +
                    ", localSegment21='" + localSegment21 + '\'' +
                    ", localSegment21Tracker=" + localSegment21Tracker +
                    ", localSegment22='" + localSegment22 + '\'' +
                    ", localSegment22Tracker=" + localSegment22Tracker +
                    ", localSegment23='" + localSegment23 + '\'' +
                    ", localSegment23Tracker=" + localSegment23Tracker +
                    ", localSegment24='" + localSegment24 + '\'' +
                    ", localSegment24Tracker=" + localSegment24Tracker +
                    ", localSegment25='" + localSegment25 + '\'' +
                    ", localSegment25Tracker=" + localSegment25Tracker +
                    ", localSegment26='" + localSegment26 + '\'' +
                    ", localSegment26Tracker=" + localSegment26Tracker +
                    ", localSegment27='" + localSegment27 + '\'' +
                    ", localSegment27Tracker=" + localSegment27Tracker +
                    ", localSegment28='" + localSegment28 + '\'' +
                    ", localSegment28Tracker=" + localSegment28Tracker +
                    ", localSegment29='" + localSegment29 + '\'' +
                    ", localSegment29Tracker=" + localSegment29Tracker +
                    ", localSegment30='" + localSegment30 + '\'' +
                    ", localSegment30Tracker=" + localSegment30Tracker +
                    ", localStatus='" + localStatus + '\'' +
                    ", localLedgerName='" + localLedgerName + '\'' +
                    ", localCcId=" + localCcId +
                    ", localCcIdTracker=" + localCcIdTracker +
                    ", localError='" + localError + '\'' +
                    ", localErrorTracker=" + localErrorTracker +
                    ", localErrorCode='" + localErrorCode + '\'' +
                    ", localErrorCodeTracker=" + localErrorCodeTracker +
                    ", localEnabledFlag=" + localEnabledFlag +
                    ", localEnabledFlagTracker=" + localEnabledFlagTracker +
                    ", localFromDate=" + localFromDate +
                    ", localFromDateTracker=" + localFromDateTracker +
                    ", localToDate=" + localToDate +
                    ", localToDateTracker=" + localToDateTracker +
                    '}';
        }
    }

    public static class ValidateAndCreateAccountsAsyncResponse
            implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                        "validateAndCreateAccountsAsyncResponse",
                        "ns6");

        /** field for Result This was an Array! */
        protected AccountValidationOutput[] localResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResultTracker = false;

        public boolean isResultSpecified() {
            return localResultTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return AccountValidationOutput[]
         */
        public AccountValidationOutput[] getResult() {
            return localResult;
        }

        /** validate the array for Result */
        protected void validateResult(AccountValidationOutput[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param Result
         */
        public void setResult(AccountValidationOutput[] param) {

            validateResult(param);

            localResultTracker = param != null;

            this.localResult = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param AccountValidationOutput
         */
        public void addResult(AccountValidationOutput param) {
            if (localResult == null) {
                localResult = new AccountValidationOutput[] {};
            }

            // update the setting tracker
            localResultTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localResult);
            list.add(param);
            this.localResult =
                    (AccountValidationOutput[]) list.toArray(new AccountValidationOutput[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(
                                xmlWriter,
                                "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":validateAndCreateAccountsAsyncResponse",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "validateAndCreateAccountsAsyncResponse",
                            xmlWriter);
                }
            }
            if (localResultTracker) {
                if (localResult != null) {
                    for (int i = 0; i < localResult.length; i++) {
                        if (localResult[i] != null) {
                            localResult[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                            "result"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("result cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals(
                    "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/")) {
                return "ns6";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ValidateAndCreateAccountsAsyncResponse parse(
                    javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
                ValidateAndCreateAccountsAsyncResponse object =
                        new ValidateAndCreateAccountsAsyncResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"validateAndCreateAccountsAsyncResponse".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ValidateAndCreateAccountsAsyncResponse)
                                        ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                            "result")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(AccountValidationOutput.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/types/",
                                        "result")
                                        .equals(reader.getName())) {
                                    list1.add(AccountValidationOutput.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setResult(
                                (AccountValidationOutput[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                AccountValidationOutput.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class URI implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "URI", "ns2");

        /** field for URI */
        protected org.apache.axis2.databinding.types.URI localURI;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axis2.databinding.types.URI
         */
        public org.apache.axis2.databinding.types.URI getURI() {
            return localURI;
        }

        /**
         * Auto generated setter method
         *
         * @param param URI
         */
        public void setURI(org.apache.axis2.databinding.types.URI param) {

            this.localURI = param;
        }

        public java.lang.String toString() {

            return localURI.toString();
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":URI",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "URI", xmlWriter);
                }
            }

            if (localURI == null) {

                throw new org.apache.axis2.databinding.ADBException("URI cannot be null !!");

            } else {

                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localURI));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static URI fromString(java.lang.String value, java.lang.String namespaceURI) {
                URI returnValue = new URI();

                returnValue.setURI(org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(value));

                return returnValue;
            }

            public static URI fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return URI.Factory.fromString(content, namespaceUri);
                } else {
                    return URI.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static URI parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
                URI object = new URI();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            if (reader.isStartElement() || reader.hasText()) {

                                nillableValue =
                                        reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                            "The element: " + "URI" + "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setURI(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class SortOrder implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = SortOrder
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for SortAttribute This was an Array! */
        protected SortAttribute[] localSortAttribute;

        /**
         * Auto generated getter method
         *
         * @return SortAttribute[]
         */
        public SortAttribute[] getSortAttribute() {
            return localSortAttribute;
        }

        /** validate the array for SortAttribute */
        protected void validateSortAttribute(SortAttribute[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param SortAttribute
         */
        public void setSortAttribute(SortAttribute[] param) {

            validateSortAttribute(param);

            this.localSortAttribute = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param SortAttribute
         */
        public void addSortAttribute(SortAttribute param) {
            if (localSortAttribute == null) {
                localSortAttribute = new SortAttribute[] {};
            }

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localSortAttribute);
            list.add(param);
            this.localSortAttribute = (SortAttribute[]) list.toArray(new SortAttribute[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":SortOrder",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SortOrder", xmlWriter);
                }
            }

            if (localSortAttribute != null) {
                for (int i = 0; i < localSortAttribute.length; i++) {
                    if (localSortAttribute[i] != null) {
                        localSortAttribute[i].serialize(
                                new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/types/", "sortAttribute"),
                                xmlWriter);
                    } else {

                        throw new org.apache.axis2.databinding.ADBException("sortAttribute cannot be null!!");
                    }
                }
            } else {

                throw new org.apache.axis2.databinding.ADBException("sortAttribute cannot be null!!");
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static SortOrder parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                SortOrder object = new SortOrder();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"SortOrder".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SortOrder) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "sortAttribute")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(SortAttribute.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/types/", "sortAttribute")
                                        .equals(reader.getName())) {
                                    list1.add(SortAttribute.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setSortAttribute(
                                (SortAttribute[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                SortAttribute.class, list1));

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ExtensionMapper {

        public static java.lang.Object getTypeObject(
                java.lang.String namespaceURI,
                java.lang.String typeName,
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {

            if ("commonj.sdo".equals(namespaceURI) && "XSDType".equals(typeName)) {

                return XSDType.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "FindCriteria".equals(typeName)) {

                return FindCriteria.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0".equals(namespaceURI)
                    && "FaultType".equals(typeName)) {

                return FaultType.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ChildFindCriteria".equals(typeName)) {

                return ChildFindCriteria.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/errors/".equals(namespaceURI)
                    && "ServiceMessage".equals(typeName)) {

                return ServiceMessage.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "date-Date".equals(typeName)) {

                return DateDate.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "Conjunction".equals(typeName)) {

                return Conjunction.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ViewCriteriaRow".equals(typeName)) {

                return ViewCriteriaRow.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/"
                    .equals(namespaceURI)
                    && "AccountValidationInput".equals(typeName)) {

                return AccountValidationInput.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ViewCriteriaItem".equals(typeName)) {

                return ViewCriteriaItem.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "ModelsType".equals(typeName)) {

                return ModelsType.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "Type".equals(typeName)) {

                return Type.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ReturnMode".equals(typeName)) {

                return ReturnMode.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "DataGraphType".equals(typeName)) {

                return DataGraphType.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/apps/financials/generalLedger/accounts/codeCombinations/accountCombinationService/"
                    .equals(namespaceURI)
                    && "AccountValidationOutput".equals(typeName)) {

                return AccountValidationOutput.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "URI".equals(typeName)) {

                return URI.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "SortOrder".equals(typeName)) {

                return SortOrder.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "String".equals(typeName)) {

                return String.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "SortAttribute".equals(typeName)) {

                return SortAttribute.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ProcessControl".equals(typeName)) {

                return ProcessControl.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "Types".equals(typeName)) {

                return Types.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "ViewCriteria".equals(typeName)) {

                return ViewCriteria.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "BaseDataGraphType".equals(typeName)) {

                return BaseDataGraphType.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "Boolean".equals(typeName)) {

                return Boolean.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "Property".equals(typeName)) {

                return Property.Factory.parse(reader);
            }

            if ("commonj.sdo".equals(namespaceURI) && "ChangeSummaryType".equals(typeName)) {

                return ChangeSummaryType.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/types/".equals(namespaceURI)
                    && "FindControl".equals(typeName)) {

                return FindControl.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0".equals(namespaceURI)
                    && "detail".equals(typeName)) {

                return Detail.Factory.parse(reader);
            }

            if ("http://xmlns.oracle.com/adf/svc/errors/".equals(namespaceURI)
                    && "ServiceErrorMessage".equals(typeName)) {

                return ServiceErrorMessage.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                    "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class String implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "String", "ns2");

        /** field for String */
        protected java.lang.String localString;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getString() {
            return localString;
        }

        /**
         * Auto generated setter method
         *
         * @param param String
         */
        public void setString(java.lang.String param) {

            this.localString = param;
        }

        public java.lang.String toString() {

            return localString.toString();
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":String",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "String", xmlWriter);
                }
            }

            if (localString == null) {

                throw new org.apache.axis2.databinding.ADBException("String cannot be null !!");

            } else {

                xmlWriter.writeCharacters(localString);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static String fromString(java.lang.String value, java.lang.String namespaceURI) {
                String returnValue = new String();

                returnValue.setString(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));

                return returnValue;
            }

            public static String fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return String.Factory.fromString(content, namespaceUri);
                } else {
                    return String.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static String parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                String object = new String();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            if (reader.isStartElement() || reader.hasText()) {

                                nillableValue =
                                        reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                            "The element: " + "String" + "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setString(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ProcessControlE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/types/", "processControl", "ns4");

        /** field for ProcessControl */
        protected ProcessControl localProcessControl;

        /**
         * Auto generated getter method
         *
         * @return ProcessControl
         */
        public ProcessControl getProcessControl() {
            return localProcessControl;
        }

        /**
         * Auto generated setter method
         *
         * @param param ProcessControl
         */
        public void setProcessControl(ProcessControl param) {

            this.localProcessControl = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localProcessControl == null) {
                throw new org.apache.axis2.databinding.ADBException("processControl cannot be null!");
            }
            localProcessControl.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ProcessControlE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ProcessControlE object = new ProcessControlE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/adf/svc/types/", "processControl")
                                    .equals(reader.getName())) {

                                object.setProcessControl(ProcessControl.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class SortAttribute implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = SortAttribute
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for Name */
        protected java.lang.String localName;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         *
         * @param param Name
         */
        public void setName(java.lang.String param) {

            this.localName = param;
        }

        /** field for Descending */
        protected boolean localDescending =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getDescending() {
            return localDescending;
        }

        /**
         * Auto generated setter method
         *
         * @param param Descending
         */
        public void setDescending(boolean param) {

            this.localDescending = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":SortAttribute",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "SortAttribute",
                            xmlWriter);
                }
            }

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "name", xmlWriter);

            if (localName == null) {
                // write the nil attribute

                throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

            } else {

                xmlWriter.writeCharacters(localName);
            }

            xmlWriter.writeEndElement();

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "descending", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException("descending cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescending));
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static SortAttribute parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                SortAttribute object = new SortAttribute();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"SortAttribute".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SortAttribute) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "name")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "descending")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "descending" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDescending(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ProcessControl implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ProcessControl
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for ReturnMode */
        protected ReturnMode localReturnMode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReturnModeTracker = false;

        public boolean isReturnModeSpecified() {
            return localReturnModeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ReturnMode
         */
        public ReturnMode getReturnMode() {
            return localReturnMode;
        }

        /**
         * Auto generated setter method
         *
         * @param param ReturnMode
         */
        public void setReturnMode(ReturnMode param) {
            localReturnModeTracker = param != null;

            this.localReturnMode = param;
        }

        /** field for ExceptionReturnMode */
        protected ReturnMode localExceptionReturnMode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExceptionReturnModeTracker = false;

        public boolean isExceptionReturnModeSpecified() {
            return localExceptionReturnModeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ReturnMode
         */
        public ReturnMode getExceptionReturnMode() {
            return localExceptionReturnMode;
        }

        /**
         * Auto generated setter method
         *
         * @param param ExceptionReturnMode
         */
        public void setExceptionReturnMode(ReturnMode param) {
            localExceptionReturnModeTracker = param != null;

            this.localExceptionReturnMode = param;
        }

        /** field for PartialFailureAllowed */
        protected boolean localPartialFailureAllowed =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getPartialFailureAllowed() {
            return localPartialFailureAllowed;
        }

        /**
         * Auto generated setter method
         *
         * @param param PartialFailureAllowed
         */
        public void setPartialFailureAllowed(boolean param) {

            this.localPartialFailureAllowed = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ProcessControl",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ProcessControl",
                            xmlWriter);
                }
            }
            if (localReturnModeTracker) {
                if (localReturnMode == null) {
                    throw new org.apache.axis2.databinding.ADBException("returnMode cannot be null!!");
                }
                localReturnMode.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "returnMode"),
                        xmlWriter);
            }
            if (localExceptionReturnModeTracker) {
                if (localExceptionReturnMode == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                            "exceptionReturnMode cannot be null!!");
                }
                localExceptionReturnMode.serialize(
                        new javax.xml.namespace.QName(
                                "http://xmlns.oracle.com/adf/svc/types/", "exceptionReturnMode"),
                        xmlWriter);
            }
            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "partialFailureAllowed", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException(
                        "partialFailureAllowed cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localPartialFailureAllowed));
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ProcessControl parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ProcessControl object = new ProcessControl();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ProcessControl".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ProcessControl) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "returnMode")
                            .equals(reader.getName())) {

                        object.setReturnMode(ReturnMode.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "exceptionReturnMode")
                            .equals(reader.getName())) {

                        object.setExceptionReturnMode(ReturnMode.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "partialFailureAllowed")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "partialFailureAllowed" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPartialFailureAllowed(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Types implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = Types
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for Type This was an Array! */
        protected Type[] localType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeTracker = false;

        public boolean isTypeSpecified() {
            return localTypeTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Type[]
         */
        public Type[] getType() {
            return localType;
        }

        /** validate the array for Type */
        protected void validateType(Type[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param Type
         */
        public void setType(Type[] param) {

            validateType(param);

            localTypeTracker = param != null;

            this.localType = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param Type
         */
        public void addType(Type param) {
            if (localType == null) {
                localType = new Type[] {};
            }

            // update the setting tracker
            localTypeTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localType);
            list.add(param);
            this.localType = (Type[]) list.toArray(new Type[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":Types",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Types", xmlWriter);
                }
            }
            if (localTypeTracker) {
                if (localType != null) {
                    for (int i = 0; i < localType.length; i++) {
                        if (localType[i] != null) {
                            localType[i].serialize(
                                    new javax.xml.namespace.QName("commonj.sdo", "type"), xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("type cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Types parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Types object = new Types();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"Types".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Types) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("commonj.sdo", "type").equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(Type.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("commonj.sdo", "type").equals(reader.getName())) {
                                    list1.add(Type.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setType(
                                (Type[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                Type.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ViewCriteria implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ViewCriteria
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for Conjunction */
        protected Conjunction localConjunction;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localConjunctionTracker = false;

        public boolean isConjunctionSpecified() {
            return localConjunctionTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return Conjunction
         */
        public Conjunction getConjunction() {
            return localConjunction;
        }

        /**
         * Auto generated setter method
         *
         * @param param Conjunction
         */
        public void setConjunction(Conjunction param) {
            localConjunctionTracker = param != null;

            this.localConjunction = param;
        }

        /** field for Group This was an Array! */
        protected ViewCriteriaRow[] localGroup;

        /**
         * Auto generated getter method
         *
         * @return ViewCriteriaRow[]
         */
        public ViewCriteriaRow[] getGroup() {
            return localGroup;
        }

        /** validate the array for Group */
        protected void validateGroup(ViewCriteriaRow[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param Group
         */
        public void setGroup(ViewCriteriaRow[] param) {

            validateGroup(param);

            this.localGroup = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param ViewCriteriaRow
         */
        public void addGroup(ViewCriteriaRow param) {
            if (localGroup == null) {
                localGroup = new ViewCriteriaRow[] {};
            }

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localGroup);
            list.add(param);
            this.localGroup = (ViewCriteriaRow[]) list.toArray(new ViewCriteriaRow[list.size()]);
        }

        /** field for Nested This was an Array! */
        protected ViewCriteria[] localNested;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNestedTracker = false;

        public boolean isNestedSpecified() {
            return localNestedTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ViewCriteria[]
         */
        public ViewCriteria[] getNested() {
            return localNested;
        }

        /** validate the array for Nested */
        protected void validateNested(ViewCriteria[] param) {

            if ((param != null) && (param.length > 500)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param Nested
         */
        public void setNested(ViewCriteria[] param) {

            validateNested(param);

            localNestedTracker = param != null;

            this.localNested = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param ViewCriteria
         */
        public void addNested(ViewCriteria param) {
            if (localNested == null) {
                localNested = new ViewCriteria[] {};
            }

            // update the setting tracker
            localNestedTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localNested);
            list.add(param);
            this.localNested = (ViewCriteria[]) list.toArray(new ViewCriteria[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ViewCriteria",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ViewCriteria",
                            xmlWriter);
                }
            }
            if (localConjunctionTracker) {
                if (localConjunction == null) {
                    throw new org.apache.axis2.databinding.ADBException("conjunction cannot be null!!");
                }
                localConjunction.serialize(
                        new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "conjunction"),
                        xmlWriter);
            }
            if (localGroup != null) {
                for (int i = 0; i < localGroup.length; i++) {
                    if (localGroup[i] != null) {
                        localGroup[i].serialize(
                                new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "group"),
                                xmlWriter);
                    } else {

                        throw new org.apache.axis2.databinding.ADBException("group cannot be null!!");
                    }
                }
            } else {

                throw new org.apache.axis2.databinding.ADBException("group cannot be null!!");
            }
            if (localNestedTracker) {
                if (localNested != null) {
                    for (int i = 0; i < localNested.length; i++) {
                        if (localNested[i] != null) {
                            localNested[i].serialize(
                                    new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "nested"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("nested cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ViewCriteria parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ViewCriteria object = new ViewCriteria();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ViewCriteria".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ViewCriteria) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "conjunction")
                            .equals(reader.getName())) {

                        object.setConjunction(Conjunction.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "group")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list2.add(ViewCriteriaRow.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;
                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "group")
                                        .equals(reader.getName())) {
                                    list2.add(ViewCriteriaRow.Factory.parse(reader));

                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setGroup(
                                (ViewCriteriaRow[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ViewCriteriaRow.class, list2));

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "nested")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list3.add(ViewCriteria.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;
                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/types/", "nested")
                                        .equals(reader.getName())) {
                                    list3.add(ViewCriteria.Factory.parse(reader));

                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setNested(
                                (ViewCriteria[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ViewCriteria.class, list3));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class BaseDataGraphType implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = BaseDataGraphType
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for Models */
        protected ModelsType localModels;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localModelsTracker = false;

        public boolean isModelsSpecified() {
            return localModelsTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ModelsType
         */
        public ModelsType getModels() {
            return localModels;
        }

        /**
         * Auto generated setter method
         *
         * @param param Models
         */
        public void setModels(ModelsType param) {
            localModelsTracker = param != null;

            this.localModels = param;
        }

        /** field for Xsd */
        protected XSDType localXsd;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localXsdTracker = false;

        public boolean isXsdSpecified() {
            return localXsdTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return XSDType
         */
        public XSDType getXsd() {
            return localXsd;
        }

        /**
         * Auto generated setter method
         *
         * @param param Xsd
         */
        public void setXsd(XSDType param) {
            localXsdTracker = param != null;

            this.localXsd = param;
        }

        /** field for ChangeSummary */
        protected ChangeSummaryType localChangeSummary;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localChangeSummaryTracker = false;

        public boolean isChangeSummarySpecified() {
            return localChangeSummaryTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return ChangeSummaryType
         */
        public ChangeSummaryType getChangeSummary() {
            return localChangeSummary;
        }

        /**
         * Auto generated setter method
         *
         * @param param ChangeSummary
         */
        public void setChangeSummary(ChangeSummaryType param) {
            localChangeSummaryTracker = param != null;

            this.localChangeSummary = param;
        }

        /** field for ExtraAttributes This was an Attribute! This was an Array! */
        protected org.apache.axiom.om.OMAttribute[] localExtraAttributes;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMAttribute[]
         */
        public org.apache.axiom.om.OMAttribute[] getExtraAttributes() {
            return localExtraAttributes;
        }

        /** validate the array for ExtraAttributes */
        protected void validateExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            if ((param != null) && (param.length > 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param ExtraAttributes
         */
        public void setExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            validateExtraAttributes(param);

            this.localExtraAttributes = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMAttribute
         */
        public void addExtraAttributes(org.apache.axiom.om.OMAttribute param) {
            if (localExtraAttributes == null) {
                localExtraAttributes = new org.apache.axiom.om.OMAttribute[] {};
            }

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraAttributes);
            list.add(param);
            this.localExtraAttributes =
                    (org.apache.axiom.om.OMAttribute[])
                            list.toArray(new org.apache.axiom.om.OMAttribute[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":BaseDataGraphType",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "BaseDataGraphType",
                            xmlWriter);
                }
            }

            if (localExtraAttributes != null) {
                for (int i = 0; i < localExtraAttributes.length; i++) {
                    writeAttribute(
                            localExtraAttributes[i].getNamespace().getName(),
                            localExtraAttributes[i].getLocalName(),
                            localExtraAttributes[i].getAttributeValue(),
                            xmlWriter);
                }
            }
            if (localModelsTracker) {
                if (localModels == null) {
                    throw new org.apache.axis2.databinding.ADBException("models cannot be null!!");
                }
                localModels.serialize(new javax.xml.namespace.QName("", "models"), xmlWriter);
            }
            if (localXsdTracker) {
                if (localXsd == null) {
                    throw new org.apache.axis2.databinding.ADBException("xsd cannot be null!!");
                }
                localXsd.serialize(new javax.xml.namespace.QName("", "xsd"), xmlWriter);
            }
            if (localChangeSummaryTracker) {
                if (localChangeSummary == null) {
                    throw new org.apache.axis2.databinding.ADBException("changeSummary cannot be null!!");
                }
                localChangeSummary.serialize(new javax.xml.namespace.QName("", "changeSummary"), xmlWriter);
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static BaseDataGraphType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                BaseDataGraphType object = null;

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"BaseDataGraphType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (BaseDataGraphType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }

                            throw new org.apache.axis2.databinding.ADBException(
                                    "The an abstract class can not be instantiated !!!");
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // now run through all any or extra attributes
                    // which were not reflected until now
                    for (int i = 0; i < reader.getAttributeCount(); i++) {
                        if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {
                            // this is an anyAttribute and we create
                            // an OMAttribute for this
                            org.apache.axiom.om.OMFactory factory =
                                    org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                            org.apache.axiom.om.OMAttribute attr =
                                    factory.createOMAttribute(
                                            reader.getAttributeLocalName(i),
                                            factory.createOMNamespace(
                                                    reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),
                                            reader.getAttributeValue(i));

                            // and add it to the extra attributes

                            object.addExtraAttributes(attr);
                        }
                    }

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "models").equals(reader.getName())) {

                        object.setModels(ModelsType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "xsd").equals(reader.getName())) {

                        object.setXsd(XSDType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("", "changeSummary").equals(reader.getName())) {

                        object.setChangeSummary(ChangeSummaryType.Factory.parse(reader));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Boolean implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("commonj.sdo", "Boolean", "ns2");

        /** field for Boolean */
        protected boolean localBoolean;

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getBoolean() {
            return localBoolean;
        }

        /**
         * Auto generated setter method
         *
         * @param param Boolean
         */
        public void setBoolean(boolean param) {

            this.localBoolean = param;
        }

        public java.lang.String toString() {

            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoolean);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":Boolean",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Boolean", xmlWriter);
                }
            }

            if (false) {

                throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBoolean));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static Boolean fromString(java.lang.String value, java.lang.String namespaceURI) {
                Boolean returnValue = new Boolean();

                returnValue.setBoolean(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(value));

                return returnValue;
            }

            public static Boolean fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return Boolean.Factory.fromString(content, namespaceUri);
                } else {
                    return Boolean.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Boolean parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Boolean object = new Boolean();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            if (reader.isStartElement() || reader.hasText()) {

                                nillableValue =
                                        reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                            "The element: " + "Boolean" + "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setBoolean(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Property implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = Property
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for AliasName This was an Array! */
        protected String[] localAliasName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAliasNameTracker = false;

        public boolean isAliasNameSpecified() {
            return localAliasNameTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return String[]
         */
        public String[] getAliasName() {
            return localAliasName;
        }

        /** validate the array for AliasName */
        protected void validateAliasName(String[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param AliasName
         */
        public void setAliasName(String[] param) {

            validateAliasName(param);

            localAliasNameTracker = param != null;

            this.localAliasName = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param String
         */
        public void addAliasName(String param) {
            if (localAliasName == null) {
                localAliasName = new String[] {};
            }

            // update the setting tracker
            localAliasNameTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAliasName);
            list.add(param);
            this.localAliasName = (String[]) list.toArray(new String[list.size()]);
        }

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /** field for Name This was an Attribute! */
        protected String localName;

        /**
         * Auto generated getter method
         *
         * @return String
         */
        public String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         *
         * @param param Name
         */
        public void setName(String param) {

            this.localName = param;
        }

        /** field for Many This was an Attribute! */
        protected Boolean localMany;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getMany() {
            return localMany;
        }

        /**
         * Auto generated setter method
         *
         * @param param Many
         */
        public void setMany(Boolean param) {

            this.localMany = param;
        }

        /** field for Containment This was an Attribute! */
        protected Boolean localContainment;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getContainment() {
            return localContainment;
        }

        /**
         * Auto generated setter method
         *
         * @param param Containment
         */
        public void setContainment(Boolean param) {

            this.localContainment = param;
        }

        /** field for _default This was an Attribute! */
        protected String local_default;

        /**
         * Auto generated getter method
         *
         * @return String
         */
        public String get_default() {
            return local_default;
        }

        /**
         * Auto generated setter method
         *
         * @param param _default
         */
        public void set_default(String param) {

            this.local_default = param;
        }

        /** field for ReadOnly This was an Attribute! */
        protected Boolean localReadOnly;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getReadOnly() {
            return localReadOnly;
        }

        /**
         * Auto generated setter method
         *
         * @param param ReadOnly
         */
        public void setReadOnly(Boolean param) {

            this.localReadOnly = param;
        }

        /** field for Type This was an Attribute! */
        protected URI localType;

        /**
         * Auto generated getter method
         *
         * @return URI
         */
        public URI getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         *
         * @param param Type
         */
        public void setType(URI param) {

            this.localType = param;
        }

        /** field for Opposite This was an Attribute! */
        protected URI localOpposite;

        /**
         * Auto generated getter method
         *
         * @return URI
         */
        public URI getOpposite() {
            return localOpposite;
        }

        /**
         * Auto generated setter method
         *
         * @param param Opposite
         */
        public void setOpposite(URI param) {

            this.localOpposite = param;
        }

        /** field for Nullable This was an Attribute! */
        protected Boolean localNullable;

        /**
         * Auto generated getter method
         *
         * @return Boolean
         */
        public Boolean getNullable() {
            return localNullable;
        }

        /**
         * Auto generated setter method
         *
         * @param param Nullable
         */
        public void setNullable(Boolean param) {

            this.localNullable = param;
        }

        /** field for ExtraAttributes This was an Attribute! This was an Array! */
        protected org.apache.axiom.om.OMAttribute[] localExtraAttributes;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMAttribute[]
         */
        public org.apache.axiom.om.OMAttribute[] getExtraAttributes() {
            return localExtraAttributes;
        }

        /** validate the array for ExtraAttributes */
        protected void validateExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            if ((param != null) && (param.length > 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param ExtraAttributes
         */
        public void setExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            validateExtraAttributes(param);

            this.localExtraAttributes = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMAttribute
         */
        public void addExtraAttributes(org.apache.axiom.om.OMAttribute param) {
            if (localExtraAttributes == null) {
                localExtraAttributes = new org.apache.axiom.om.OMAttribute[] {};
            }

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraAttributes);
            list.add(param);
            this.localExtraAttributes =
                    (org.apache.axiom.om.OMAttribute[])
                            list.toArray(new org.apache.axiom.om.OMAttribute[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":Property",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Property", xmlWriter);
                }
            }

            if (localName != null) {
                writeAttribute("", "name", localName.toString(), xmlWriter);
            }

            if (localMany != null) {
                writeAttribute("", "many", localMany.toString(), xmlWriter);
            }

            if (localContainment != null) {
                writeAttribute("", "containment", localContainment.toString(), xmlWriter);
            }

            if (local_default != null) {
                writeAttribute("", "default", local_default.toString(), xmlWriter);
            }

            if (localReadOnly != null) {
                writeAttribute("", "readOnly", localReadOnly.toString(), xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type", localType.toString(), xmlWriter);
            }

            if (localOpposite != null) {
                writeAttribute("", "opposite", localOpposite.toString(), xmlWriter);
            }

            if (localNullable != null) {
                writeAttribute("", "nullable", localNullable.toString(), xmlWriter);
            }

            if (localExtraAttributes != null) {
                for (int i = 0; i < localExtraAttributes.length; i++) {
                    writeAttribute(
                            localExtraAttributes[i].getNamespace().getName(),
                            localExtraAttributes[i].getLocalName(),
                            localExtraAttributes[i].getAttributeValue(),
                            xmlWriter);
                }
            }
            if (localAliasNameTracker) {
                if (localAliasName != null) {
                    for (int i = 0; i < localAliasName.length; i++) {
                        if (localAliasName[i] != null) {
                            localAliasName[i].serialize(
                                    new javax.xml.namespace.QName("commonj.sdo", "aliasName"), xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("aliasName cannot be null!!");
                }
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Property parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Property object = new Property();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"Property".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Property) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "name"
                    java.lang.String tempAttribName = reader.getAttributeValue(null, "name");

                    if (tempAttribName != null) {
                        java.lang.String content = tempAttribName;

                        object.setName(String.Factory.fromString(reader, tempAttribName));

                    } else {

                    }
                    handledAttributes.add("name");

                    // handle attribute "many"
                    java.lang.String tempAttribMany = reader.getAttributeValue(null, "many");

                    if (tempAttribMany != null) {
                        java.lang.String content = tempAttribMany;

                        object.setMany(Boolean.Factory.fromString(reader, tempAttribMany));

                    } else {

                    }
                    handledAttributes.add("many");

                    // handle attribute "containment"
                    java.lang.String tempAttribContainment = reader.getAttributeValue(null, "containment");

                    if (tempAttribContainment != null) {
                        java.lang.String content = tempAttribContainment;

                        object.setContainment(Boolean.Factory.fromString(reader, tempAttribContainment));

                    } else {

                    }
                    handledAttributes.add("containment");

                    // handle attribute "default"
                    java.lang.String tempAttrib_default = reader.getAttributeValue(null, "default");

                    if (tempAttrib_default != null) {
                        java.lang.String content = tempAttrib_default;

                        object.set_default(String.Factory.fromString(reader, tempAttrib_default));

                    } else {

                    }
                    handledAttributes.add("default");

                    // handle attribute "readOnly"
                    java.lang.String tempAttribReadOnly = reader.getAttributeValue(null, "readOnly");

                    if (tempAttribReadOnly != null) {
                        java.lang.String content = tempAttribReadOnly;

                        object.setReadOnly(Boolean.Factory.fromString(reader, tempAttribReadOnly));

                    } else {

                    }
                    handledAttributes.add("readOnly");

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null, "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(URI.Factory.fromString(reader, tempAttribType));

                    } else {

                    }
                    handledAttributes.add("type");

                    // handle attribute "opposite"
                    java.lang.String tempAttribOpposite = reader.getAttributeValue(null, "opposite");

                    if (tempAttribOpposite != null) {
                        java.lang.String content = tempAttribOpposite;

                        object.setOpposite(URI.Factory.fromString(reader, tempAttribOpposite));

                    } else {

                    }
                    handledAttributes.add("opposite");

                    // handle attribute "nullable"
                    java.lang.String tempAttribNullable = reader.getAttributeValue(null, "nullable");

                    if (tempAttribNullable != null) {
                        java.lang.String content = tempAttribNullable;

                        object.setNullable(Boolean.Factory.fromString(reader, tempAttribNullable));

                    } else {

                    }
                    handledAttributes.add("nullable");

                    // now run through all any or extra attributes
                    // which were not reflected until now
                    for (int i = 0; i < reader.getAttributeCount(); i++) {
                        if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {
                            // this is an anyAttribute and we create
                            // an OMAttribute for this
                            org.apache.axiom.om.OMFactory factory =
                                    org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                            org.apache.axiom.om.OMAttribute attr =
                                    factory.createOMAttribute(
                                            reader.getAttributeLocalName(i),
                                            factory.createOMNamespace(
                                                    reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),
                                            reader.getAttributeValue(i));

                            // and add it to the extra attributes

                            object.addExtraAttributes(attr);
                        }
                    }

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("commonj.sdo", "aliasName")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list1.add(String.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("commonj.sdo", "aliasName")
                                        .equals(reader.getName())) {
                                    list1.add(String.Factory.parse(reader));

                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setAliasName(
                                (String[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                String.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list2.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone2 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone2 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list2));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class FindControlE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/types/", "findControl", "ns4");

        /** field for FindControl */
        protected FindControl localFindControl;

        /**
         * Auto generated getter method
         *
         * @return FindControl
         */
        public FindControl getFindControl() {
            return localFindControl;
        }

        /**
         * Auto generated setter method
         *
         * @param param FindControl
         */
        public void setFindControl(FindControl param) {

            this.localFindControl = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localFindControl == null) {
                throw new org.apache.axis2.databinding.ADBException("findControl cannot be null!");
            }
            localFindControl.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static FindControlE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                FindControlE object = new FindControlE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/adf/svc/types/", "findControl")
                                    .equals(reader.getName())) {

                                object.setFindControl(FindControl.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class Detail implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = detail
    Namespace URI = http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0
    Namespace Prefix = ns1
    */

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /** field for ExtraAttributes This was an Attribute! This was an Array! */
        protected org.apache.axiom.om.OMAttribute[] localExtraAttributes;

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMAttribute[]
         */
        public org.apache.axiom.om.OMAttribute[] getExtraAttributes() {
            return localExtraAttributes;
        }

        /** validate the array for ExtraAttributes */
        protected void validateExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            if ((param != null) && (param.length > 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }

            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException("Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         *
         * @param param ExtraAttributes
         */
        public void setExtraAttributes(org.apache.axiom.om.OMAttribute[] param) {

            validateExtraAttributes(param);

            this.localExtraAttributes = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMAttribute
         */
        public void addExtraAttributes(org.apache.axiom.om.OMAttribute param) {
            if (localExtraAttributes == null) {
                localExtraAttributes = new org.apache.axiom.om.OMAttribute[] {};
            }

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraAttributes);
            list.add(param);
            this.localExtraAttributes =
                    (org.apache.axiom.om.OMAttribute[])
                            list.toArray(new org.apache.axiom.om.OMAttribute[list.size()]);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":detail",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "detail", xmlWriter);
                }
            }

            if (localExtraAttributes != null) {
                for (int i = 0; i < localExtraAttributes.length; i++) {
                    writeAttribute(
                            localExtraAttributes[i].getNamespace().getName(),
                            localExtraAttributes[i].getLocalName(),
                            localExtraAttributes[i].getAttributeValue(),
                            xmlWriter);
                }
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/oracleas/schema/oracle-fault-11_0")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static Detail parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                Detail object = new Detail();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"detail".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Detail) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // now run through all any or extra attributes
                    // which were not reflected until now
                    for (int i = 0; i < reader.getAttributeCount(); i++) {
                        if (!handledAttributes.contains(reader.getAttributeLocalName(i))) {
                            // this is an anyAttribute and we create
                            // an OMAttribute for this
                            org.apache.axiom.om.OMFactory factory =
                                    org.apache.axiom.om.OMAbstractFactory.getOMFactory();
                            org.apache.axiom.om.OMAttribute attr =
                                    factory.createOMAttribute(
                                            reader.getAttributeLocalName(i),
                                            factory.createOMNamespace(
                                                    reader.getAttributeNamespace(i), reader.getAttributePrefix(i)),
                                            reader.getAttributeValue(i));

                            // and add it to the extra attributes

                            object.addExtraAttributes(attr);
                        }
                    }

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list1.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone1 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone1 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ServiceErrorMessageE implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName(
                        "http://xmlns.oracle.com/adf/svc/errors/", "ServiceErrorMessage", "ns3");

        /** field for ServiceErrorMessage */
        protected ServiceErrorMessage localServiceErrorMessage;

        /**
         * Auto generated getter method
         *
         * @return ServiceErrorMessage
         */
        public ServiceErrorMessage getServiceErrorMessage() {
            return localServiceErrorMessage;
        }

        /**
         * Auto generated setter method
         *
         * @param param ServiceErrorMessage
         */
        public void setServiceErrorMessage(ServiceErrorMessage param) {

            this.localServiceErrorMessage = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            if (localServiceErrorMessage == null) {
                throw new org.apache.axis2.databinding.ADBException("ServiceErrorMessage cannot be null!");
            }
            localServiceErrorMessage.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/errors/")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ServiceErrorMessageE parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ServiceErrorMessageE object = new ServiceErrorMessageE();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {

                            if (reader.isStartElement()
                                    && new javax.xml.namespace.QName(
                                    "http://xmlns.oracle.com/adf/svc/errors/", "ServiceErrorMessage")
                                    .equals(reader.getName())) {

                                object.setServiceErrorMessage(ServiceErrorMessage.Factory.parse(reader));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ChangeSummaryType implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ChangeSummaryType
    Namespace URI = commonj.sdo
    Namespace Prefix = ns2
    */

        /** field for ExtraElement This was an Array! */
        protected org.apache.axiom.om.OMElement[] localExtraElement;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraElementTracker = false;

        public boolean isExtraElementSpecified() {
            return localExtraElementTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return org.apache.axiom.om.OMElement[]
         */
        public org.apache.axiom.om.OMElement[] getExtraElement() {
            return localExtraElement;
        }

        /** validate the array for ExtraElement */
        protected void validateExtraElement(org.apache.axiom.om.OMElement[] param) {}

        /**
         * Auto generated setter method
         *
         * @param param ExtraElement
         */
        public void setExtraElement(org.apache.axiom.om.OMElement[] param) {

            validateExtraElement(param);

            localExtraElementTracker = param != null;

            this.localExtraElement = param;
        }

        /**
         * Auto generated add method for the array for convenience
         *
         * @param param org.apache.axiom.om.OMElement
         */
        public void addExtraElement(org.apache.axiom.om.OMElement param) {
            if (localExtraElement == null) {
                localExtraElement = new org.apache.axiom.om.OMElement[] {};
            }

            // update the setting tracker
            localExtraElementTracker = true;

            java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
            list.add(param);
            this.localExtraElement =
                    (org.apache.axiom.om.OMElement[])
                            list.toArray(new org.apache.axiom.om.OMElement[list.size()]);
        }

        /** field for Create This was an Attribute! */
        protected java.lang.String localCreate;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getCreate() {
            return localCreate;
        }

        /**
         * Auto generated setter method
         *
         * @param param Create
         */
        public void setCreate(java.lang.String param) {

            this.localCreate = param;
        }

        /** field for Delete This was an Attribute! */
        protected java.lang.String localDelete;

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getDelete() {
            return localDelete;
        }

        /**
         * Auto generated setter method
         *
         * @param param Delete
         */
        public void setDelete(java.lang.String param) {

            this.localDelete = param;
        }

        /** field for Logging This was an Attribute! */
        protected boolean localLogging;

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getLogging() {
            return localLogging;
        }

        /**
         * Auto generated setter method
         *
         * @param param Logging
         */
        public void setLogging(boolean param) {

            this.localLogging = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "commonj.sdo");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":ChangeSummaryType",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            "ChangeSummaryType",
                            xmlWriter);
                }
            }

            if (localCreate != null) {

                writeAttribute(
                        "",
                        "create",
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreate),
                        xmlWriter);
            }

            if (localDelete != null) {

                writeAttribute(
                        "",
                        "delete",
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelete),
                        xmlWriter);
            }

            if (true) {

                writeAttribute(
                        "",
                        "logging",
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogging),
                        xmlWriter);
            }
            if (localExtraElementTracker) {

                if (localExtraElement != null) {
                    for (int i = 0; i < localExtraElement.length; i++) {
                        if (localExtraElement[i] != null) {
                            localExtraElement[i].serialize(xmlWriter);
                        } else {

                            // we have to do nothing since minOccures zero

                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("commonj.sdo")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ChangeSummaryType parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ChangeSummaryType object = new ChangeSummaryType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ChangeSummaryType".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ChangeSummaryType) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "create"
                    java.lang.String tempAttribCreate = reader.getAttributeValue(null, "create");

                    if (tempAttribCreate != null) {
                        java.lang.String content = tempAttribCreate;

                        object.setCreate(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribCreate));

                    } else {

                    }
                    handledAttributes.add("create");

                    // handle attribute "delete"
                    java.lang.String tempAttribDelete = reader.getAttributeValue(null, "delete");

                    if (tempAttribDelete != null) {
                        java.lang.String content = tempAttribDelete;

                        object.setDelete(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(tempAttribDelete));

                    } else {

                    }
                    handledAttributes.add("delete");

                    // handle attribute "logging"
                    java.lang.String tempAttribLogging = reader.getAttributeValue(null, "logging");

                    if (tempAttribLogging != null) {
                        java.lang.String content = tempAttribLogging;

                        object.setLogging(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                        tempAttribLogging));

                    } else {

                    }
                    handledAttributes.add("logging");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()) {

                        // Process the array and step past its final element's end.

                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            event = reader.getEventType();
                            if (javax.xml.stream.XMLStreamConstants.START_ELEMENT == event) {
                                list1.add(
                                        org.apache.axis2.databinding.utils.FactoryUtil.extractElement(reader, true));
                                if (reader.isEndElement()) {
                                    // we have two countinuos end elements
                                    loopDone1 = true;
                                }

                            } else if (javax.xml.stream.XMLStreamConstants.END_ELEMENT == event) {
                                loopDone1 = true;
                            } else {
                                reader.next();
                            }
                        }

                        object.setExtraElement(
                                (org.apache.axiom.om.OMElement[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                org.apache.axiom.om.OMElement.class, list1));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class FindControl implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = FindControl
    Namespace URI = http://xmlns.oracle.com/adf/svc/types/
    Namespace Prefix = ns4
    */

        /** field for RetrieveAllTranslations */
        protected boolean localRetrieveAllTranslations =
                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");

        /**
         * Auto generated getter method
         *
         * @return boolean
         */
        public boolean getRetrieveAllTranslations() {
            return localRetrieveAllTranslations;
        }

        /**
         * Auto generated setter method
         *
         * @param param RetrieveAllTranslations
         */
        public void setRetrieveAllTranslations(boolean param) {

            this.localRetrieveAllTranslations = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            if (serializeType) {

                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":FindControl",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "FindControl", xmlWriter);
                }
            }

            namespace = "http://xmlns.oracle.com/adf/svc/types/";
            writeStartElement(null, namespace, "retrieveAllTranslations", xmlWriter);

            if (false) {

                throw new org.apache.axis2.databinding.ADBException(
                        "retrieveAllTranslations cannot be null!!");

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localRetrieveAllTranslations));
            }

            xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static FindControl parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                FindControl object = new FindControl();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"FindControl".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (FindControl) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/types/", "retrieveAllTranslations")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "retrieveAllTranslations" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRetrieveAllTranslations(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class ServiceErrorMessage extends ServiceMessage
            implements org.apache.axis2.databinding.ADBBean {
    /* This type was generated from the piece of schema that had
    name = ServiceErrorMessage
    Namespace URI = http://xmlns.oracle.com/adf/svc/errors/
    Namespace Prefix = ns3
    */

        /** field for SdoObject */
        protected java.lang.Object localSdoObject;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSdoObjectTracker = false;

        public boolean isSdoObjectSpecified() {
            return localSdoObjectTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.Object
         */
        public java.lang.Object getSdoObject() {
            return localSdoObject;
        }

        /**
         * Auto generated setter method
         *
         * @param param SdoObject
         */
        public void setSdoObject(java.lang.Object param) {
            localSdoObjectTracker = param != null;

            this.localSdoObject = param;
        }

        /** field for ExceptionClassName */
        protected java.lang.String localExceptionClassName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExceptionClassNameTracker = false;

        public boolean isExceptionClassNameSpecified() {
            return localExceptionClassNameTracker;
        }

        /**
         * Auto generated getter method
         *
         * @return java.lang.String
         */
        public java.lang.String getExceptionClassName() {
            return localExceptionClassName;
        }

        /**
         * Auto generated setter method
         *
         * @param param ExceptionClassName
         */
        public void setExceptionClassName(java.lang.String param) {
            localExceptionClassNameTracker = param != null;

            this.localExceptionClassName = param;
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, parentQName));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

            java.lang.String namespacePrefix =
                    registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/errors/");
            if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                writeAttribute(
                        "xsi",
                        "http://www.w3.org/2001/XMLSchema-instance",
                        "type",
                        namespacePrefix + ":ServiceErrorMessage",
                        xmlWriter);
            } else {
                writeAttribute(
                        "xsi",
                        "http://www.w3.org/2001/XMLSchema-instance",
                        "type",
                        "ServiceErrorMessage",
                        xmlWriter);
            }

            if (localCodeTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "code", xmlWriter);

                if (localCode == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localCode);
                }

                xmlWriter.writeEndElement();
            }
            if (localMessageTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "message", xmlWriter);

                if (localMessage == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localMessage);
                }

                xmlWriter.writeEndElement();
            }
            if (localSeverityTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "severity", xmlWriter);

                if (localSeverity == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException("severity cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localSeverity);
                }

                xmlWriter.writeEndElement();
            }
            if (localDetailTracker) {
                if (localDetail != null) {
                    for (int i = 0; i < localDetail.length; i++) {
                        if (localDetail[i] != null) {
                            localDetail[i].serialize(
                                    new javax.xml.namespace.QName(
                                            "http://xmlns.oracle.com/adf/svc/errors/", "detail"),
                                    xmlWriter);
                        } else {

                            // we don't have to do any thing since minOccures is zero

                        }
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("detail cannot be null!!");
                }
            }
            if (localSdoObjectTracker) {

                if (localSdoObject != null) {
                    if (localSdoObject instanceof org.apache.axis2.databinding.ADBBean) {
                        ((org.apache.axis2.databinding.ADBBean) localSdoObject)
                                .serialize(
                                        new javax.xml.namespace.QName(
                                                "http://xmlns.oracle.com/adf/svc/errors/", "sdoObject"),
                                        xmlWriter,
                                        true);
                    } else {
                        writeStartElement(
                                null, "http://xmlns.oracle.com/adf/svc/errors/", "sdoObject", xmlWriter);
                        org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(
                                localSdoObject, xmlWriter);
                        xmlWriter.writeEndElement();
                    }
                } else {

                    throw new org.apache.axis2.databinding.ADBException("sdoObject cannot be null!!");
                }
            }
            if (localExceptionClassNameTracker) {
                namespace = "http://xmlns.oracle.com/adf/svc/errors/";
                writeStartElement(null, namespace, "exceptionClassName", xmlWriter);

                if (localExceptionClassName == null) {
                    // write the nil attribute

                    throw new org.apache.axis2.databinding.ADBException(
                            "exceptionClassName cannot be null!!");

                } else {

                    xmlWriter.writeCharacters(localExceptionClassName);
                }

                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/errors/")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static ServiceErrorMessage parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                ServiceErrorMessage object = new ServiceErrorMessage();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type")
                            != null) {
                        java.lang.String fullTypeName =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

                            if (!"ServiceErrorMessage".equals(type)) {
                                // find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ServiceErrorMessage) ExtensionMapper.getTypeObject(nsUri, type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list4 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "code")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "code" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCode(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "message")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "message" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMessage(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/errors/", "severity")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "severity" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSeverity(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/errors/", "detail")
                            .equals(reader.getName())) {

                        // Process the array and step past its final element's end.

                        list4.add(ServiceMessage.Factory.parse(reader));

                        // loop until we find a start element that is not part of this array
                        boolean loopDone4 = false;
                        while (!loopDone4) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement()) reader.next();
                            // Step out of this element
                            reader.next();
                            // Step to next element event.
                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            if (reader.isEndElement()) {
                                // two continuous end elements means we are exiting the xml structure
                                loopDone4 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                        "http://xmlns.oracle.com/adf/svc/errors/", "detail")
                                        .equals(reader.getName())) {
                                    list4.add(ServiceMessage.Factory.parse(reader));

                                } else {
                                    loopDone4 = true;
                                }
                            }
                        }
                        // call the converter utility  to convert and set the array

                        object.setDetail(
                                (ServiceMessage[])
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                ServiceMessage.class, list4));

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/errors/", "sdoObject")
                            .equals(reader.getName())) {

                        object.setSdoObject(
                                org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(
                                        reader, ExtensionMapper.class));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement()
                            && new javax.xml.namespace.QName(
                            "http://xmlns.oracle.com/adf/svc/errors/", "exceptionClassName")
                            .equals(reader.getName())) {

                        nillableValue =
                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "exceptionClassName" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setExceptionClassName(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                        reader.next();

                    } // End of if for expected property start element
                    else {

                    }

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    if (reader.isStartElement())
                        // 2 - A start element we are not expecting indicates a trailing invalid property

                        throw new org.apache.axis2.databinding.ADBException(
                                "Unexpected subelement " + reader.getName());

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    public static class DateDate implements org.apache.axis2.databinding.ADBBean {

        public static final javax.xml.namespace.QName MY_QNAME =
                new javax.xml.namespace.QName("http://xmlns.oracle.com/adf/svc/types/", "date-Date", "ns4");

        /** field for DateDate */
        protected java.util.Date localDateDate;

        /**
         * Auto generated getter method
         *
         * @return java.util.Date
         */
        public java.util.Date getDateDate() {
            return localDateDate;
        }

        /**
         * Auto generated setter method
         *
         * @param param DateDate
         */
        public void setDateDate(java.util.Date param) {

            this.localDateDate = param;
        }

        public java.lang.String toString() {

            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateDate);
        }

        /**
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
                final javax.xml.namespace.QName parentQName, final org.apache.axiom.om.OMFactory factory)
                throws org.apache.axis2.databinding.ADBException {

            return factory.createOMElement(
                    new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME));
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(
                final javax.xml.namespace.QName parentQName,
                javax.xml.stream.XMLStreamWriter xmlWriter,
                boolean serializeType)
                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {

            // We can safely assume an element has only one type associated with it

            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix =
                        registerPrefix(xmlWriter, "http://xmlns.oracle.com/adf/svc/types/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute(
                            "xsi",
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "type",
                            namespacePrefix + ":date-Date",
                            xmlWriter);
                } else {
                    writeAttribute(
                            "xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "date-Date", xmlWriter);
                }
            }

            if (localDateDate == null) {

                throw new org.apache.axis2.databinding.ADBException("date-Date cannot be null !!");

            } else {

                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateDate));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if (namespace.equals("http://xmlns.oracle.com/adf/svc/types/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /** Utility method to write an element start tag. */
        private void writeStartElement(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String localPart,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /** Util method to write an attribute with the ns prefix */
        private void writeAttribute(
                java.lang.String prefix,
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName, attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                java.lang.String attValue,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(
                        registerPrefix(xmlWriter, namespace), namespace, attName, attValue);
            }
        }

        /** Util method to write an attribute without the ns prefix */
        private void writeQNameAttribute(
                java.lang.String namespace,
                java.lang.String attName,
                javax.xml.namespace.QName qname,
                javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName, attributeValue);
            }
        }
        /** method to handle Qnames */
        private void writeQName(
                javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(
                            prefix
                                    + ":"
                                    + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(
                javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
                throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite
                                    .append(prefix)
                                    .append(":")
                                    .append(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /** Register a namespace prefix */
        private java.lang.String registerPrefix(
                javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
                throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }

        /** Factory class that keeps the parse method */
        public static class Factory {
            private static org.apache.commons.logging.Log log =
                    org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DateDate fromString(java.lang.String value, java.lang.String namespaceURI) {
                DateDate returnValue = new DateDate();

                returnValue.setDateDate(
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(value));

                return returnValue;
            }

            public static DateDate fromString(
                    javax.xml.stream.XMLStreamReader xmlStreamReader, java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri =
                            xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return DateDate.Factory.fromString(content, namespaceUri);
                } else {
                    return DateDate.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object Precondition: If this object is an element, the current
             * or next start element starts this object and any intervening reader events are ignorable If
             * this object is not an element, it is a complex type and the reader is at the event just
             * after the outer start element Postcondition: If this object is an element, the reader is
             * positioned at its end element If this object is a complex type, the reader is positioned at
             * the end element of its outer element
             */
            public static DateDate parse(javax.xml.stream.XMLStreamReader reader)
                    throws java.lang.Exception {
                DateDate object = new DateDate();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {

                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {

                            if (reader.isStartElement() || reader.hasText()) {

                                nillableValue =
                                        reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                            "The element: " + "date-Date" + "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDateDate(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(content));

                            } // End of if for expected property start element
                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was
                                // passed

                                throw new org.apache.axis2.databinding.ADBException(
                                        "Unexpected subelement " + reader.getName());
                            }

                        } else {
                            reader.next();
                        }
                    } // end of while loop

                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } // end of factory class
    }

    private org.apache.axiom.om.OMElement toOM(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub
                    .ValidateAndCreateAccountsAsync
                    param,
            boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(
                    com.rite.products.convertrite.stubs
                            .accountcombinationservice.AccountCombinationServiceStub
                            .ValidateAndCreateAccountsAsync.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts
                    param,
            boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(
                    com.rite.products.convertrite.stubs
                            .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts
                            .MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub
                    .ValidateAndCreateAccountsResponse
                    param,
            boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(
                    com.rite.products.convertrite.stubs
                            .accountcombinationservice.AccountCombinationServiceStub
                            .ValidateAndCreateAccountsResponse.MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ServiceErrorMessageE
                    param,
            boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

        try {
            return param.getOMElement(
                    com.rite.products.convertrite.stubs
                            .accountcombinationservice.AccountCombinationServiceStub.ServiceErrorMessageE
                            .MY_QNAME,
                    org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
            org.apache.axiom.soap.SOAPFactory factory,
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub
                    .ValidateAndCreateAccountsAsync
                    param,
            boolean optimizeContent,
            javax.xml.namespace.QName elementQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope
                    .getBody()
                    .addChild(
                            param.getOMElement(
                                    com.rite.products.convertrite.stubs
                                            .accountcombinationservice.AccountCombinationServiceStub
                                            .ValidateAndCreateAccountsAsync.MY_QNAME,
                                    factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
            org.apache.axiom.soap.SOAPFactory factory,
            com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts
                    param,
            boolean optimizeContent,
            javax.xml.namespace.QName elementQName)
            throws org.apache.axis2.AxisFault {

        try {

            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope
                    .getBody()
                    .addChild(
                            param.getOMElement(
                                    com.rite.products.convertrite.stubs
                                            .accountcombinationservice.AccountCombinationServiceStub
                                            .ValidateAndCreateAccounts.MY_QNAME,
                                    factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /** get the default envelope */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param, java.lang.Class type)
            throws org.apache.axis2.AxisFault {

        try {

            if (com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ServiceErrorMessageE.class
                    .equals(type)) {

                javax.xml.stream.XMLStreamReader reader = param.getXMLStreamReaderWithoutCaching();
                java.lang.Object result =
                        com.rite.products.convertrite.stubs
                                .accountcombinationservice.AccountCombinationServiceStub.ServiceErrorMessageE
                                .Factory.parse(reader);
                reader.close();
                return result;
            }

            if (com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts.class
                    .equals(type)) {

                javax.xml.stream.XMLStreamReader reader = param.getXMLStreamReaderWithoutCaching();
                java.lang.Object result =
                        com.rite.products.convertrite.stubs
                                .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccounts
                                .Factory.parse(reader);
                reader.close();
                return result;
            }

            if (com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccountsAsync
                    .class
                    .equals(type)) {

                javax.xml.stream.XMLStreamReader reader = param.getXMLStreamReaderWithoutCaching();
                java.lang.Object result =
                        com.rite.products.convertrite.stubs
                                .accountcombinationservice.AccountCombinationServiceStub
                                .ValidateAndCreateAccountsAsync.Factory.parse(reader);
                reader.close();
                return result;
            }

            if (com.rite.products.convertrite.stubs
                    .accountcombinationservice.AccountCombinationServiceStub.ValidateAndCreateAccountsResponse
                    .class
                    .equals(type)) {

                javax.xml.stream.XMLStreamReader reader = param.getXMLStreamReaderWithoutCaching();
                java.lang.Object result =
                        com.rite.products.convertrite.stubs
                                .accountcombinationservice.AccountCombinationServiceStub
                                .ValidateAndCreateAccountsResponse.Factory.parse(reader);
                reader.close();
                return result;
            }

        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
        return null;
    }
}
